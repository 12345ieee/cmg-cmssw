#include <iostream>
#include <iomanip>
#include <fstream>
#include <memory>
#include <map>

#include "L1Trigger/L1TGlobal/src/L1TMenuEditor/L1TriggerMenu.hxx"

// The default XML file to load.
#define XML_OUTPUT "sample.xml"

// String conversions.
std::string to_string(const l1t::Meta&);
std::string to_string(const xml_schema::hex_binary&);
uint64_t to_uint(const xml_schema::hex_binary&);
std::string to_string(uint64_t);
std::string to_string(const xml_schema::date_time&);
std::string to_string(const l1t::CalorimeterCondition&);
std::string to_string(const l1t::MuonCondition&);
std::string to_string(const l1t::ConditionList&);
std::string to_string(const l1t::Algorithm&);
std::string to_string(const l1t::AlgorithmList&);

// Overload ostream operators for easy printing.
std::ostream& operator<<(std::ostream&, const xml_schema::date_time&);
std::ostream& operator<<(std::ostream&, const l1t::Meta&);
std::ostream& operator<<(std::ostream&, const l1t::CalorimeterCondition&);
std::ostream& operator<<(std::ostream&, const l1t::ConditionList&);
std::ostream& operator<<(std::ostream&, const l1t::Algorithm&);
std::ostream& operator<<(std::ostream&, const l1t::AlgorithmList&);

// The application.
int main (int argc, char** argv)
{
    std::string xml_file = XML_OUTPUT;
    if (argc > 1) xml_file = argv[1];

    try
    {
        // Load XML to init.
        std::auto_ptr<l1t::L1TriggerMenu> tm(l1t::l1TriggerMenu(xml_file));

        // Return data.
        std::cout << tm->meta() << std::endl;

        // Print conditions.
        std::cout << tm->conditions() << std::endl;

        // Print algorithms.
        std::cout << tm->algorithms() << std::endl;
    }
    catch (const xml_schema::exception& e)
    {
        std::cerr << "\033[31;1mXML Exception:\033[0m " << e << std::endl;
        return 1;
    }

    return 0;
}


// String conversions.

std::string to_string(const l1t::Meta& meta)
{
    std::stringstream o;
    o << "Meta {" << std::endl;
    o << "  name:            " << meta.name() << std::endl;
    o << "  scalesKey:       " << meta.scalesKey() << std::endl;
    o << "  firmwareVersion: " << meta.firmwareVersion() << std::endl;
    o << "  creationDate:    " << meta.creationDate() << std::endl;
    o << "  creationAuthor:  " << meta.creationAuthor() << std::endl;
    o << "  changesDate:     " << meta.changesDate() << std::endl;
    o << "  changesAuthor:   " << meta.changesAuthor() << std::endl;
    o << "  description:     " << meta.description() << std::endl;
    o << "}" << std::endl;
    return o.str();
}

std::string to_string(const xml_schema::hex_binary& data)
{
    std::stringstream o;
    o << std::hex << "0x";
    for (size_t i = 0; i < data.size(); ++i)
        o << (static_cast<int>(data.data()[i]) & 0xff);
    return o.str();
}

uint64_t to_uint(const xml_schema::hex_binary& data)
{
    std::stringstream o;
    o << std::hex << to_string(data);
    uint64_t i = 0;
    o >> std::hex >> i;
    return i;
}

std::string to_string(uint64_t data)
{
    std::stringstream o;
    o << data;
    return o.str();
}

std::string to_string(const xml_schema::date_time& date)
{
    std::stringstream o;
    o << std::setfill('0');
    o << std::setw(4) << date.year() << "-" << std::setw(2) << date.month() << "-" << std::setw(2) << date.day() << "T";
    o << std::setw(2) << date.hours() << ":" << std::setw(2) << date.minutes() << ":" << std::setw(2) << date.seconds();
    return o.str();
}

std::string to_string(const l1t::CalorimeterCondition& condition)
{
    std::stringstream o;
    o << condition.name()  << " {"                    << std::endl;
    o << "  location: "    << condition.location()    << std::endl;
    o << "  description: " << condition.description() << std::endl;
    o << "  locked: "      << condition.locked()      << std::endl;
    o << "}" << std::endl;
    return o.str();
}

std::string to_string(const l1t::MuonCondition& condition)
{
    std::stringstream o;
    o << condition.name()  << " {"                    << std::endl;
    o << "  location: "    << condition.location()    << std::endl;
    o << "  description: " << condition.description() << std::endl;
    o << "  locked: "      << condition.locked()      << std::endl;
    o << "}" << std::endl;
    return o.str();
}

std::string to_string(const l1t::ConditionList& conditions)
{
    std::stringstream o;
    o << "---- Calorimter Conditions ----" << std::endl;
    o << std::endl;
    for (l1t::ConditionList::condCalorimeter_const_iterator i = conditions.condCalorimeter().begin();
         i != conditions.condCalorimeter().end(); ++i)
    {
        o << to_string(*i) << std::endl;
    }

    o << "---- Muon Conditions ----" << std::endl;
    o << std::endl;
    for (l1t::ConditionList::condMuon_const_iterator i = conditions.condMuon().begin();
         i != conditions.condMuon().end(); ++i)
    {
        o << to_string(*i) << std::endl;
    }
    return o.str();
}

std::string to_string(const l1t::Algorithm& algorithm)
{
    std::stringstream o;
    o << algorithm.name()  << " {"                    << std::endl;
    o << "  index: "       << algorithm.index()       << std::endl;
    o << "  equation: "    << algorithm.equation()    << std::endl;
    o << "  location: "    << algorithm.location()    << std::endl;
    o << "  description: " << algorithm.description() << std::endl;
    o << "  locked: "      << algorithm.locked()      << std::endl;
    o << "}" << std::endl;
    return o.str();
}

std::string to_string(const l1t::AlgorithmList& algorithms)
{
    std::stringstream o;
    o << "---- Algorithms ----" << std::endl;
    o << std::endl;
    for (l1t::AlgorithmList::algorithm_const_iterator i = algorithms.algorithm().begin();
         i != algorithms.algorithm().end(); ++i)
    {
        o << to_string(*i) << std::endl;
    }
    return o.str();
}

// Overload ostream operators for easy printing.

std::ostream& operator<<(std::ostream& o, const xml_schema::date_time& date)
{
    o << to_string(date);
    return o;
}

std::ostream& operator<<(std::ostream& o, const l1t::Meta& m)
{
    o << to_string(m);
    return o;
}

std::ostream& operator<<(std::ostream& o, const l1t::CalorimeterCondition& condition)
{
    o << to_string(condition);
    return o;
}

std::ostream& operator<<(std::ostream& o, const l1t::ConditionList& conditions)
{
    o << to_string(conditions);
    return o;
}

std::ostream& operator<<(std::ostream& o, const l1t::Algorithm& algorithm)
{
    o << to_string(algorithm);
    return o;
}

std::ostream& operator<<(std::ostream& o, const l1t::AlgorithmList& algorithms)
{
    o << to_string(algorithms);
    return o;
}

// eof

