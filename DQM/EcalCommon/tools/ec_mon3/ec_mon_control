#!/usr/bin/env perl -w

use strict "vars";
use vars qw( %opts );
use vars qw( %config );

use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();
GetOptions( \%opts,
                "conf|c=s",
                "force|f",
                "debug|d",
                "help|h"
);
usage() if ( $opts{'help'} || $Getopt::Long::error );

use File::Basename;

unshift(@INC, dirname($0));
require "ec_mon_utils.pl";

ec_mon_conf_file();

my $command = shift @ARGV;

usage() if ( ! defined($command) );

if ( $opts{'force'} ) {
  system("rm -f $config{'ec_mon_master_rundir'}/dqm-data/.ec_mon_master_run$config{'ec_mon_master_name'}");
}

if ( $command eq 'start' && -e "$config{'ec_mon_master_rundir'}/dqm-data/.ec_mon_master_run$config{'ec_mon_master_name'}" ) {
  die "Error: ec_mon_master appears to be running on the system somewhere.\n";
}

if ( $command ) {
  if ( $command eq 'start' ) {
    ec_mon_control_set_status( $command );
  } elsif ( $command eq 'run' ) {
    ec_mon_control_set_status( $command );
  } elsif ( $command eq 'suspend' ) {
    ec_mon_control_set_status( $command );
  } elsif ( $command eq 'stop' ) {
    ec_mon_control_set_status( $command );
  } elsif ( $command eq 'status' ) {
    ec_mon_control_get_status();
  } else {
    usage();
  }
} else {
  usage();
}

my $options = '';

if ( $opts{'conf'} ) {
  $options .= " --conf $opts{'conf'}";
}
if ( $opts{'debug'} ) {
  $options .= " --debug";
}

if ( $command eq 'start' ) {
  system("$config{'ec_mon_path'}/ec_mon_master $options >> $config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'} 2>&1 &");
}

exit 0;

############################################################################

sub ec_mon_control_get_status {
  print "\nStatus:\n\n";
  if ( -e "$config{'ec_mon_master_rundir'}/dqm-data/.ec_mon_master_run$config{'ec_mon_master_name'}" ) {
    print "The $config{'ec_mon_master_rundir'}/dqm-data/.ec_mon_master_run$config{'ec_mon_master_name'} file\nis in place.\n\n";
  } else {
    print "The $config{'ec_mon_master_rundir'}/dqm-data/.ec_mon_master_run$config{'ec_mon_master_name'} file is not in place.\n\n";
  }

  open FILE, "<$config{'$ec_mon_conf'}";
  while ( my $line = <FILE> ) {
    if ( $line =~ "ec_mon_master_runcontrol=run" ) {
      print "The $config{'$ec_mon_conf'} file says ec_mon_master is running.\n\n";
    } elsif ( $line =~ "ec_mon_master_runcontrol=suspend" ) {
      print "The $config{'$ec_mon_conf'} file says ec_mon_master is suspended.\n\n";
    } elsif ( $line =~ "ec_mon_master_runcontrol=stop" ) {
      print "The $config{'$ec_mon_conf'} file says ec_mon_master is stopped.\n\n";
    }
  }
  close FILE;

  my $logtime;
  my $modtime;
  if ( -e "$config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'}" ) {
    my $logtime = (stat("$config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'}"))[9];
    if ( defined($logtime) ) {
      $modtime = sprintf ("%.1f", abs( time() - $logtime ) / 60.);
      if ( $modtime < 10.0 ) {
        print "The $config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'} file\nhas been modified $modtime minutes ago\n(less than 10 minutes usually indicates that ec_mon_master is running).\n\n";
      } else {
        print "The $config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'} file has been modified $modtime minutes ago:\n(more than 10 minutes usually indicates that ec_mon_master is not running).\n\n";
      }
    } else {
      print "The modification time of $config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'} is not available.\n\n";
    }
  } else {
    print "The $config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'} is not available.\n\n";
  }
}

sub ec_mon_control_set_status {
  my( $state ) = @_;

  open FILE, "<$config{'$ec_mon_conf'}";
  open TMP, ">$config{'$ec_mon_conf'}_tmp";
  while( my $line = <FILE> ) {
    if ( $line =~ /^ec_mon_master_runcontrol=(\S+)/ ) {
      if ( $state eq 'start' && $1 eq 'suspend' ) {
        print TMP $line;
      } elsif ( $state eq 'start' ) {
        print TMP "ec_mon_master_runcontrol=run\n";
      } else {
        print TMP "ec_mon_master_runcontrol=$state\n";
      }
    } else {
      print TMP $line;
    }
  }
  close TMP;
  close FILE;

  system("mv -f $config{'$ec_mon_conf'}_tmp $config{'$ec_mon_conf'}");
}

sub usage {

  print STDERR <<INLINE_LITERAL_TEXT;
usage: ec_mon_control [options] [command]

Options are:
  --conf   Needs a path name to use a ec_mon.conf from a location other
           than the current directory

  --force  Removes the status file before executing the command

  --debug

Commands are:
    start
    run
    suspend
    stop
    status
INLINE_LITERAL_TEXT

  exit;
}

############################################################################

