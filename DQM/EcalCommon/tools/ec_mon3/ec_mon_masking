#!/usr/bin/env perl

use strict "vars";
use vars qw( %opts );
use vars qw( %config );

use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();
GetOptions( \%opts,
                "location|l=s",
                "run|r=s",
                "type|t=s",
                "read",
                "verify",
                "write",
                "help|h"
);
usage() if ( $opts{'help'} || $Getopt::Long::error );

my $location = $opts{'location'};
my $run = $opts{'run'};
my $type = $opts{'type'};

usage() if ( ! $location || ! $run || ! $type );

usage() if ( ! $opts{'read'} && ! $opts{'verify'} && ! $opts{'write'} );

use File::Basename;

unshift(@INC, dirname($0));
require "ec_mon_utils.pl";

my $cmssw_setup = "/cmssrv0/nfshome0/cmssw2/scripts/setup.sh";

my $cmssw_path = "/nfshome0/ecalpro/DQM/CMSSW_current";

exit 1 unless ( -e "$cmssw_path" );

my $dbName     = '';
my $dbHostName = '';
my $dbHostPort = 1521;
my $dbUserName = '';
my $dbPassword = '';

if ( -e "$config{'ec_mon_path'}/.omds.conf" ) {
  eval `cat $config{'ec_mon_path'}/.omds.conf`;
}

if ( $opts{'read'} ) {
  system("source $cmssw_setup ; cd $cmssw_path ; eval `scramv1 runtime -sh`; readMaskFromDB --sid=$dbName --user-name=$dbUserName --password=$dbPassword --location=$location --run-number=$run");
  exit 0;
}

if ( $opts{'verify'} ) {
  system("source $cmssw_setup ; cd $cmssw_path ; eval `scramv1 runtime -sh`; writeMaskToDB --sid=$dbName --user-name=$dbUserName --password=$dbPassword --location=$location --run-number=$run --verify-syntax");
  exit 0;
}

if ( $opts{'write'} ) {
  system("source $cmssw_setup ; cd $cmssw_path ; eval `scramv1 runtime -sh`; writeMaskToDB --sid=$dbName --user-name=$dbUserName --password=$dbPassword --location=$location --run-number=$run --run-type=$type");
  exit 0;
}

############################################################################

sub usage {

        print STDERR <<INLINE_LITERAL_TEXT;
usage: ec_mon_masking --location <location> \
                      --run <run_number> \
                      --type <run_type> \
                      [options]

Options are:
  --read     Read masking from DB
  --verify   Verify masking file
  --write    Write masking to DB
INLINE_LITERAL_TEXT

        exit;
}

############################################################################

