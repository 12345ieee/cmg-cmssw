#!/usr/bin/env perl

use strict "vars";
use vars qw( %opts );
use vars qw( %config );

use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();
GetOptions( \%opts,
	    "conf|c=s",
	    "debug|d",
	    "norun",
	    "archive_now",
	    "remove_now",
	    "move_now",
	    "help|h"
	    );
usage() if ( $opts{'help'} || $Getopt::Long::error );

use File::Basename;

unshift(@INC, dirname($0));
require "ec_mon_utils.pl";

ec_mon_conf_file();

#maximum number of runs to be archived at each cycle
my $archive_maxruns = 20;

#time after which to archive a 'done' run
#my $archive_timeout = 7 * 24 * 60 * 60; #  7 days in secs
#my $archive_timeout = 2 * 24 * 60 * 60; #  2 days in secs
#my $archive_timeout = 1 * 24 * 60 * 60; # 24 hours in secs
#my $archive_timeout = 1 * 12 * 60 * 60; # 12 hours in secs
#my $archive_timeout = 1 *  6 * 60 * 60; #  6 hours in secs
#my $archive_timeout = 1 *  1 * 60 * 60; # 60 minutes in secs
my $archive_timeout = 1 *  1 * 10 * 60; # 10 minutes in secs

$archive_timeout = 0 if ( $opts{'archive_now'} );

#time after which to move an 'archived' run
my $move_timeout = 1 * 24 * 60 * 60; # 24 hours in secs

$move_timeout = 0 if ( $opts{'move_now'} );

#time after which to remove a 'failed' run
my $remove_timeout = 30 * 24 * 60 * 60; #30 days in secs

$remove_timeout = 0 if ( $opts{'remove_now'} );

if ( $config{'ec_mon_archive_dir'} eq '' ) {

    print "ec_mon_archive_dir is not defined !\n";
    exit 1;

}

my $daqdir = "$config{'ec_mon_master_rundir'}/daq-data";
my $dqmdir = "$config{'ec_mon_master_rundir'}/dqm-data";
my $statusdir = "$dqmdir/status";

exit 1 if ( -e "$dqmdir/.ec_mon_master_archive_lock$config{'ec_mon_master_name'}" );

system("touch $dqmdir/.ec_mon_master_archive_lock$config{'ec_mon_master_name'}");

my @done_runs;
my @failed_runs;

@done_runs = split('\n', `$config{'ec_mon_path'}/ec_mon_check --nocolor --short --mon_done --conf $config{'$ec_mon_conf'} @ARGV | tail -100`);
@failed_runs = split('\n', `$config{'ec_mon_path'}/ec_mon_check --nocolor --short --daq_fail --daq_abort --daq_empty --mon_fail --conf $config{'$ec_mon_conf'} @ARGV | tail -100`);

my $runfile;
my $run;

if ( @done_runs == 0 ) {

    print "No runs to archive\n" if ( $opts{'debug'} );

} else {

    my $numruns = 0;

    foreach $runfile ( @done_runs ) {

	$runfile =~ s/ *$//;

	my $norun = "";
	if ($opts{'norun'}) {
	    $norun = "--norun";
	}
	my $debug = "";
	if ($opts{'debug'}){
	    $debug = "--debug";
	}

	my $status = system("$config{'ec_mon_path'}/ec_mon_convert $norun $debug $runfile");

	if ($status != 0 || ! -e "$statusdir/.$runfile.converted") {
	    print "Run $runfile is not converted\n" if ($opts{'debug'});
	    next;
	}

	my ($loc, $num, $lun, $out, $fun, $fil, $ful, $typ) = split('\.', "$runfile");

	my @datfiles = split('\n', `find $daqdir/ -maxdepth 1 -name '$loc.$num.*.dat' -printf '%f\n' 2>&1 | sort`);

	foreach $run ( @datfiles ) {

	    $run =~ s/[.]dat//;
	    $run =~ s/ *$//;

	    ($loc, $num, $lun, $out, $fun, $fil, $ful) = split('\.', "$run");

	    my $streamer = "$run.dat";
	    my $pool = "$loc.$num.$ful.$typ.root";

	    print "Checking existence on disk of run $run\n" if ( $opts{'debug'} );

	    if ( -e "$daqdir/$run.archived" ) {

		open FILE, "<$daqdir/$run.archived";
		my $file = <FILE>;
		close FILE;

		print "This run has been already archived\n" if ( $opts{'debug'} );

		if ( -e "$daqdir/$streamer" || -e "$daqdir/$pool") {

		    my $update = (stat("$daqdir/$streamer"))[9];
		    my $time = ((( time() - $update ) / 60.) / 60.);

		    printf "Last updated %.1f hours ago\n", $time if ( $opts{'debug'} );

		    if ( ( time() - $update ) > $move_timeout ) {

			print "Moving $daqdir/$streamer and $daqdir/$pool to $daqdir/trash/: " if ( $opts{'debug'} );

			$status = 0;
			$status = system("mv -f $daqdir/$streamer $daqdir/$pool $daqdir/trash/") unless ( $opts{'norun'} );

			if ( ! $status ) {

			    print "done\n" if ( $opts{'debug'} );

			    open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
			    print LOGFILE localtime()." - ec_mon_archive: moved $daqdir/$streamer and $daqdir/$pool to $daqdir/trash/\n";
			    close LOGFILE;

			} else {

			    print "failed\n" if ( $opts{'debug'} );

			    open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
			    print LOGFILE localtime()." - ec_mon_archive: problems moving $daqdir/$streamer and $daqdir/$pool to $daqdir/trash/\n";
			    close LOGFILE;

			    system("rm $dqmdir/.ec_mon_master_archive_lock$config{'ec_mon_master_name'}");
			    exit 1;

			}

		    }

		}

	    } elsif ( -e "$daqdir/$streamer" && -e "$daqdir/$pool" ) {

		$numruns++;

		last if ( $numruns > $archive_maxruns );

		print "Found $daqdir/$streamer and $daqdir/$pool on disk\n" if ( $opts{'debug'} );

		my $update = (stat("$daqdir/$streamer"))[9];
		my $time = ((( time() - $update ) / 60.) / 60.);

		printf "Last updated %.1f hours ago\n", $time if ( $opts{'debug'} );

		if ( ( time() - $update ) > $archive_timeout ) {

		    print "File $streamer needs to be saved\n" if ( $opts{'debug'} );

		    print "Transferring $daqdir/$streamer and $daqdir/$pool to $config{'ec_mon_archive_dir'}/\n" if ( $opts{'debug'} );

		    $status = 0;
		    $status = system("scp -p -o StrictHostKeyChecking=no $daqdir/$streamer $daqdir/$pool $config{'ec_mon_archive_dir'}/ >> /dev/null 2>&1") unless ( $opts{'norun'} );

		    if ( $status ) {

			print "Problems with the transfer of $daqdir/$streamer or $daqdir/$pool\n";

			open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
			print LOGFILE localtime()." - ec_mon_archive: problems with the transfer of $daqdir/$streamer or $daqdir/$pool\n";
			close LOGFILE;

			system("rm $dqmdir/.ec_mon_master_archive_lock$config{'ec_mon_master_name'}");
			exit 1;

		    }

		    unless ( $opts{'norun'} ) {

			open FILE, ">$daqdir/$run.archived";
			print FILE "$config{'ec_mon_archive_dir'}/$streamer $config{'ec_mon_archive_dir'}/$pool\n";
			close FILE;

		    }

		    print "Archived $daqdir/$streamer as $config{'ec_mon_archive_dir'}/$streamer\n" if ( $opts{'debug'} );
		    print "Archived $daqdir/$pool as $config{'ec_mon_archive_dir'}/$pool\n" if ( $opts{'debug'} );

		    open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
		    print LOGFILE localtime()." - ec_mon_archive: archived $daqdir/$streamer as $config{'ec_mon_archive_dir'}/$streamer\n";
		    print LOGFILE localtime()." - ec_mon_archive: archived $daqdir/$pool as $config{'ec_mon_archive_dir'}/$pool\n";
		    close LOGFILE;

		    if ( -e "$statusdir/.$loc.$num.$lun.$out.$fun.$fil.$ful.LASER-STD.mon_done" ) {

			print "Transferring laser run $daqdir/$streamer to LMF\n" if ( $opts{'debug'} );

			$status = 0;
			system("scp -p -o StrictHostKeyChecking=no $daqdir/$streamer ecallaser\@srv-ecal-laser-13:/localdata/disk0/ecallaser/data/streams/LocalRuns/ >> /dev/null 2>&1") unless ( $opts{'norun'} );

			if ( $status ) {

			    print "Problems with the transfer of laser run $daqdir/$streamer to LMF\n";

			    open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
			    print LOGFILE localtime()." - ec_mon_archive: problems with the transfer of laser run $daqdir/$streamer to LMF\n";
			    close LOGFILE;

			    system("rm $dqmdir/.ec_mon_master_archive_lock$config{'ec_mon_master_name'}");
			    exit 1;

			}

			print "Copied laser run $daqdir/$streamer to LMF\n" if ( $opts{'debug'} );

			open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
			print LOGFILE localtime()." - ec_mon_archive: copied laser run $daqdir/$streamer to LMF\n";
			close LOGFILE;

		    }

		    if ( -e "$statusdir/.$loc.$num.$lun.$out.$fun.$fil.$ful.LED-STD.mon_done" ) {

			print "Transferring led run $daqdir/$streamer to LMF\n" if ( $opts{'debug'} );

			$status = 0;
			system("scp -p -o StrictHostKeyChecking=no $daqdir/$streamer ecallaser\@srv-ecal-laser-13:/localdata/disk0/ecallaser/data/streams/LocalRuns/ >> /dev/null 2>&1") unless ( $opts{'norun'} );

			if ( $status ) {

			    print "Problems with the transfer of led run $daqdir/$streamer to LMF\n";

			    open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
			    print LOGFILE localtime()." - ec_mon_archive: problems with the transfer of led run $daqdir/$streamer to LMF\n";
			    close LOGFILE;

			    system("rm $dqmdir/.ec_mon_master_archive_lock$config{'ec_mon_master_name'}");
			    exit 1;

			}

			print "Copied led run $daqdir/$streamer to LMF\n" if ( $opts{'debug'} );

			open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
			print LOGFILE localtime()." - ec_mon_archive: copied led run $daqdir/$streamer to LMF\n";
			close LOGFILE;

		    }

		}

	    }

	}

    }

}

if ( @failed_runs == 0 ) {

    print "No failed runs to remove\n" if ( $opts{'debug'} );

} else {

    foreach $runfile ( @failed_runs ) {

	my ($loc, $num, $out, $fun, $fil, $typ, $sta) = split('\.', "$runfile");

	my @datfiles = split('\n', `find $daqdir/ -maxdepth 1 -name '$loc.$num.*.dat' -printf '%f\n' 2>&1 | sort`);

	foreach $run ( @datfiles ) {

	    $run =~ s/.dat//;
	    $run =~ s/ *$//;

	    print "Checking existence on disk of failed run $run\n" if ( $opts{'debug'} );

	    my $status;

	    if ( -e "$daqdir/$run.dat" ) {

		print "Found failed $daqdir/$run.dat on disk\n" if ( $opts{'debug'} );

		my $update = (stat("$daqdir/$run.dat"))[9];
		my $time = ((( time() - $update ) / 60.) / 60.);

		printf "Last updated %.1f hours ago\n", $time if ( $opts{'debug'} );

		if ( ( time() - $update ) > $remove_timeout ) {

		    print "Failed run $run needs to be removed: " if ( $opts{'debug'} );

		    $status = 0;
		    $status = system("rm -f $daqdir/$run.dat $statusdir/.$run.*") unless ( $opts{'norun'} );

		    if ( ! $status ) {

			print "done\n" if ( $opts{'debug'} );

			open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
			print LOGFILE localtime()." - ec_mon_archive: removed failed run $run\n";
			close LOGFILE;

		    } else {

			print "failed\n" if ( $opts{'debug'} );

			open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
			print LOGFILE localtime()." - ec_mon_archive: problems removing failed run $run\n";
			close LOGFILE;

		    }

		}

	    }

	}

    }

}

system("rm $dqmdir/.ec_mon_master_archive_lock$config{'ec_mon_master_name'}");

exit 0;

############################################################################

sub usage {

    print STDERR <<INLINE_LITERAL_TEXT;
usage: ec_mon_archive [options] [run1#run2]

If a run range is not specified ec_mon_archive will look through all available
runs.

Options are:
  --conf     Needs a path name to use a ec_mon.conf from a location other
	     than the current directory.

  --norun    Do not archive and delete the runs, just list what would be done

  --debug
INLINE_LITERAL_TEXT

exit;
}


############################################################################

