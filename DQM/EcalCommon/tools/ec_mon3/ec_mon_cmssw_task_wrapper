#!/usr/bin/env perl

use strict "vars";
use vars qw( %opts );
use vars qw( %config );

use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();
GetOptions( \%opts,
                "run|r=s",
                "file|f=s",
                "help|h"
);
usage() if ( $opts{'help'} || $Getopt::Long::error );

my $runnum = $opts{'run'};
my $filnam = $opts{'file'};

usage() if ( ! $runnum && ! $filnam );

use File::Basename;

unshift(@INC, dirname($0));
require "ec_mon_utils.pl";

ec_mon_conf_file();

my ($loc, $num, $lun, $out, $fun, $fil, $ful) = split('\.', $runnum);

my @filelist = split('\n', `find $config{'ec_mon_master_rundir'}/daq-data/ \\( -name 'ecal_local.$num.*.A.$fun.*.*.dat' -or -name 'Global*.$num.*.A.$fun.*.*.dat' -or -name 'MW*.$num.*.A.$fun.*.*.dat' -or -name 'PrivCal*.$num.*.A.$fun.*.*.dat' -or -name 'TransferTestWithSafety.$num.*.A.$fun.*.*.dat' -or -name 'CRUZET*.$num.*.A.$fun.*.*.dat' -or -name 'CRAFT*.$num.*.A.$fun.*.*.dat' \\) -printf '%f\n' -maxdepth 1 | sort`);

my @filelist_archived = split('\n', `find $config{'ec_mon_master_rundir'}/daq-data/trash/ \\( -name 'ecal_local.$num.*.A.$fun.*.*.dat' -or -name 'Global*.$num.*.A.$fun.*.*.dat' -or -name 'MW*.$num.*.A.$fun.*.*.dat' -or -name 'PrivCal*.$num.*.A.$fun.*.*.dat' -or -name 'TransferTestWithSafety.$num.*.A.$fun.*.*.dat' -or -name 'CRUZET*.$num.*.A.$fun.*.*.dat' -or -name 'CRAFT*.$num.*.A.$fun.*.*.dat' \\) -printf '%f\n' -maxdepth 1 | sort`);

if ( $runnum ) {
  exit 1 unless ( @filelist != 0 ||
                  @filelist_archived != 0 );
}

if ( $filnam ) {
  if ( -e "$filnam" ) {
    $runnum = basename($filnam);
  } else {
    print "file: $filnam does not exist ...\n";
    exit 1;
  }
}

my $cmssw_setup = "/cmssrv0/nfshome0/cmssw2/scripts/setup.sh";

my $cmssw_path = "/nfshome0/ecalpro/DQM/CMSSW_current";

exit 1 unless ( -e "$cmssw_path" );

my $task;

if ( -e "$config{'ec_mon_master_rundir'}/dqm-data/tmp/monitor-$runnum.py" ) {
  system("rm -f $config{'ec_mon_master_rundir'}/dqm-data/tmp/monitor-$runnum.py >> /dev/null 2>&1");
}

open CONFIGFILE, ">>$config{'ec_mon_master_rundir'}/dqm-data/tmp/monitor-$runnum.py";

print CONFIGFILE <<EOF1;
import FWCore.ParameterSet.Config as cms

dbName = ''
dbHostName = ''
dbHostPort = 1521
dbUserName = ''
dbPassword = ''

try:
  file = open('$config{'ec_mon_path'}/.cms_tstore.conf', 'r')
  for line in file:
    if line.find('dbName') >= 0:
      dbName = line.split()[2]
    if line.find('dbHostName') >= 0:
      dbHostName = line.split()[2]
    if line.find('dbHostPort') >= 0:
      dbHostPort = int(line.split()[2])
    if line.find('dbUserName') >= 0:
      dbUserName = line.split()[2]
    if line.find('dbPassword') >= 0:
      dbPassword = line.split()[2]
  file.close()
except:  pass

process = cms.Process("ECALDQM")

process.load("EventFilter.EcalRawToDigiDev.EcalUnpackerMapping_cfi")
process.load("EventFilter.EcalRawToDigiDev.EcalUnpackerData_cfi")

import RecoLocalCalo.EcalRecProducers.ecalFixedAlphaBetaFitUncalibRecHit_cfi
process.ecalUncalibHit2 = RecoLocalCalo.EcalRecProducers.ecalFixedAlphaBetaFitUncalibRecHit_cfi.ecalFixedAlphaBetaFitUncalibRecHit.clone()

import RecoLocalCalo.EcalRecProducers.ecalWeightUncalibRecHit_cfi
process.ecalUncalibHit = RecoLocalCalo.EcalRecProducers.ecalWeightUncalibRecHit_cfi.ecalWeightUncalibRecHit.clone()

process.load("RecoLocalCalo.EcalRecProducers.ecalRecHit_cfi")

process.load("DQM.EcalBarrelMonitorModule.EcalBarrelMonitorModule_cfi")

process.load("DQM.EcalEndcapMonitorModule.EcalEndcapMonitorModule_cfi")

process.load("DQM.EcalBarrelMonitorTasks.EcalBarrelMonitorTasks_cfi")

process.load("DQM.EcalEndcapMonitorTasks.EcalEndcapMonitorTasks_cfi")

process.load("Geometry.CaloEventSetup.CaloGeometry_cfi")

process.load("Geometry.CaloEventSetup.CaloTopology_cfi")

process.load("Geometry.CaloEventSetup.EcalTrigTowerConstituents_cfi")

process.load("Geometry.CMSCommonData.cmsIdealGeometryXML_cfi")

process.load("SimCalorimetry.EcalTrigPrimProducers.ecalTriggerPrimitiveDigis_cff")

process.load("Geometry.EcalMapping.EcalMapping_cfi")

process.load("Geometry.EcalMapping.EcalMappingRecord_cfi")

process.load("DQM.EcalBarrelMonitorClient.EcalBarrelMonitorClient_cfi")

process.load("DQM.EcalEndcapMonitorClient.EcalEndcapMonitorClient_cfi")

process.load("RecoEcal.EgammaClusterProducers.ecalClusteringSequence_cff")

process.load("CalibCalorimetry.EcalLaserCorrection.ecalLaserCorrectionService_cfi")

process.load("DQMServices.Core.DQM_cfg")

process.dqmInfoEB = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('EcalBarrel')
)

process.dqmInfoEE = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('EcalEndcap')
)

process.dqmQTestEB = cms.EDAnalyzer("QualityTester",
    reportThreshold = cms.untracked.string('red'),
    prescaleFactor = cms.untracked.int32(1),
    qtList = cms.untracked.FileInPath('DQM/EcalBarrelMonitorModule/test/data/EcalBarrelQualityTests.xml'),
    getQualityTestsFromFile = cms.untracked.bool(True)
)

process.dqmQTestEE = cms.EDAnalyzer("QualityTester",
    reportThreshold = cms.untracked.string('red'),
    prescaleFactor = cms.untracked.int32(1),
    qtList = cms.untracked.FileInPath('DQM/EcalEndcapMonitorModule/test/data/EcalEndcapQualityTests.xml'),
    getQualityTestsFromFile = cms.untracked.bool(True)
)

process.dqmSaver = cms.EDAnalyzer("DQMFileSaver",
    dirName = cms.untracked.string('$config{'ec_mon_master_rundir'}/dqm-data/tmp'),
    convention = cms.untracked.string('Online'),
    referenceHandling = cms.untracked.string('qtests')
    #referenceHandling = cms.untracked.string('all')
)

process.load("FWCore.Modules.preScaler_cfi")

process.ecalPrescaler = cms.EDFilter("EcalMonitorPrescaler",
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    laserPrescaleFactor = cms.untracked.int32(1),
    ledPrescaleFactor = cms.untracked.int32(1),
    pedestalPrescaleFactor = cms.untracked.int32(1),
    testpulsePrescaleFactor = cms.untracked.int32(1),
    pedestaloffsetPrescaleFactor = cms.untracked.int32(1)
)

process.source = cms.Source("NewEventStreamFileReader",
EOF1

if ( $filnam ) {
  printf CONFIGFILE "    fileNames = cms.untracked.vstring('file:$filnam')\n";
} elsif ( @filelist != 0 ) {
  my $i=0;
  printf CONFIGFILE "    fileNames = cms.untracked.vstring(";
  printf CONFIGFILE "'file:$config{'ec_mon_master_rundir'}/daq-data/$filelist[$i]'";
  for ($i=1; $i < @filelist && $i < 255; $i++) {
    printf CONFIGFILE ",\n";
    printf CONFIGFILE "                                      'file:$config{'ec_mon_master_rundir'}/daq-data/$filelist[$i]'";
  }
  printf CONFIGFILE ")\n";
} elsif ( @filelist_archived != 0 ) {
  my $i=0;
  printf CONFIGFILE "    fileNames = cms.untracked.vstring(";
  printf CONFIGFILE "'file:$config{'ec_mon_master_rundir'}/daq-data/trash/$filelist_archived[$i]'";
  for ($i=1; $i < @filelist_archived && $i < 255; $i++) {
    printf CONFIGFILE ",\n";
    printf CONFIGFILE "                                      'file:$config{'ec_mon_master_rundir'}/daq-data/trash/$filelist_archived[$i]'";
  }
  printf CONFIGFILE ")\n";
} else {
  exit 1;
}

print CONFIGFILE <<EOF2;
)

process.load("CalibCalorimetry.EcalTrivialCondModules.EcalTrivialCondRetriever_cfi")

process.EcalTrivialConditionRetriever.adcToGeVEBConstant = cms.untracked.double(0.00875)
process.EcalTrivialConditionRetriever.adcToGeVEEConstant = cms.untracked.double(0.060)
process.EcalTrivialConditionRetriever.pedWeights = cms.untracked.vdouble(0.333, 0.333, 0.333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
process.EcalTrivialConditionRetriever.pedWeightsAft = cms.untracked.vdouble(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
process.EcalTrivialConditionRetriever.amplWeights = cms.untracked.vdouble(-0.333, -0.333, -0.333, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)
process.EcalTrivialConditionRetriever.amplWeightsAftGain = cms.untracked.vdouble(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)
process.EcalTrivialConditionRetriever.jittWeights = cms.untracked.vdouble(0.041, 0.041, 0.041, 0.0, 1.325, -0.050, -0.504, -0.502, -0.390, 0.0)
process.EcalTrivialConditionRetriever.jittWeightsAft = cms.untracked.vdouble(0.0, 0.0, 0.0, 0.0, 1.098, -0.046, -0.416, -0.419, -0.337, 0.0)
process.EcalTrivialConditionRetriever.channelStatusFile = 'CalibCalorimetry/EcalTrivialCondModules/data/listCRUZET4.v1.hashed.txt'

#process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")
#process.GlobalTag.connect = "frontier://(proxyurl=http://localhost:3128)(serverurl=http://frontier1.cms:8000/FrontierOnProd)(serverurl=http://frontier2.cms:8000/FrontierOnProd)(retrieve-ziplevel=0)/CMS_COND_21X_GLOBALTAG"
#process.GlobalTag.globaltag = "CRAFT_V17H::All"
#process.GlobalTag.connect = "frontier://(proxyurl=http://localhost:3128)(serverurl=http://frontier1.cms:8000/FrontierOnProd)(serverurl=http://frontier2.cms:8000/FrontierOnProd)(retrieve-ziplevel=0)/CMS_COND_31X_GLOBALTAG"
#process.GlobalTag.globaltag = "GR09_H_V1::All"
#process.prefer("GlobalTag")

process.MessageLogger = cms.Service("MessageLogger",
    cout = cms.untracked.PSet(
        threshold = cms.untracked.string('WARNING'),
        noLineBreaks = cms.untracked.bool(True),
        noTimeStamps = cms.untracked.bool(True),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        EcalRawToDigiDev = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevTriggerType = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevTpg = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevNumTowerBlocks = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevTowerId = cms.untracked.PSet( 
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevTowerSize = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevChId = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevGainZero = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevGainSwitch = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevDccBlockSize = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevMemBlock = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevMemTowerId = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevMemChId = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevMemGain = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevTCC = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevSRP = cms.untracked.PSet( 
            limit = cms.untracked.int32(1000)
        ),
        EcalDCCHeaderRuntypeDecoder = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalBarrelMonitorModule = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalEndcapMonitorModule = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        )
    ),
    categories = cms.untracked.vstring('EcalRawToDigiDev',
                                       'EcalRawToDigiDevTriggerType',
                                       'EcalRawToDigiDevTpg',
                                       'EcalRawToDigiDevNumTowerBlocks',
                                       'EcalRawToDigiDevTowerId',
                                       'EcalRawToDigiDevTowerSize',
                                       'EcalRawToDigiDevChId',
                                       'EcalRawToDigiDevGainZero',
                                       'EcalRawToDigiDevGainSwitch',
                                       'EcalRawToDigiDevDccBlockSize',
                                       'EcalRawToDigiDevMemBlock',
                                       'EcalRawToDigiDevMemTowerId',
                                       'EcalRawToDigiDevMemChId',
                                       'EcalRawToDigiDevMemGain',
                                       'EcalRawToDigiDevTCC',
                                       'EcalRawToDigiDevSRP',
                                       'EcalDCCHeaderRuntypeDecoder',
                                       'EcalBarrelMonitorModule',
                                       'EcalEndcapMonitorModule'),
    destinations = cms.untracked.vstring('cout')
)

process.preScaler.prescaleFactor = 1
#process.preScaler.prescaleFactor = 10

process.ecalDataSequence = cms.Sequence(process.preScaler*process.ecalEBunpacker*process.ecalUncalibHit*process.ecalUncalibHit2*process.ecalRecHit*process.simEcalTriggerPrimitiveDigis)

process.ecalBarrelMonitorSequence = cms.Sequence(process.ecalBarrelMonitorModule*process.dqmInfoEB*process.ecalBarrelMonitorClient*process.dqmQTestEB)

process.ecalEndcapMonitorSequence = cms.Sequence(process.ecalEndcapMonitorModule*process.dqmInfoEE*process.ecalEndcapMonitorClient*process.dqmQTestEE)

process.p = cms.Path(process.ecalDataSequence*process.ecalBarrelMonitorSequence*process.ecalEndcapMonitorSequence*process.dqmSaver)
process.q = cms.Path(process.ecalDataSequence*~process.ecalPrescaler*process.hybridSuperClusters*process.correctedHybridSuperClusters*process.multi5x5BasicClusters*process.multi5x5SuperClusters)
process.r = cms.EndPath(process.ecalBarrelCosmicTasksSequence*process.ecalBarrelClusterTask*process.ecalEndcapCosmicTasksSequence*process.ecalEndcapClusterTask)

process.ecalEBunpacker.silentMode = False

process.ecalUncalibHit2.MinAmplBarrel = 12.
process.ecalUncalibHit2.MinAmplEndcap = 16.
process.ecalUncalibHit2.EBdigiCollection = 'ecalEBunpacker:ebDigis'
process.ecalUncalibHit2.EEdigiCollection = 'ecalEBunpacker:eeDigis'

process.ecalUncalibHit.EBdigiCollection = 'ecalEBunpacker:ebDigis'
process.ecalUncalibHit.EEdigiCollection = 'ecalEBunpacker:eeDigis'

#process.ecalRecHit.killDeadChannels = False
process.ecalRecHit.EBuncalibRecHitCollection = 'ecalUncalibHit2:EcalUncalibRecHitsEB'
process.ecalRecHit.EEuncalibRecHitCollection = 'ecalUncalibHit2:EcalUncalibRecHitsEE'

process.ecalBarrelCosmicTask.EcalUncalibratedRecHitCollection = 'ecalUncalibHit2:EcalUncalibRecHitsEB'
process.ecalBarrelLaserTask.EcalUncalibratedRecHitCollection = 'ecalUncalibHit2:EcalUncalibRecHitsEB'
#process.ecalBarrelLaserTask.laserWavelengths = [ 1, 2, 3, 4 ]
process.ecalBarrelLaserTask.laserWavelengths = [ 1, 4 ]
process.ecalBarrelTimingTask.EcalUncalibratedRecHitCollection = 'ecalUncalibHit2:EcalUncalibRecHitsEB'

process.ecalEndcapCosmicTask.EcalUncalibratedRecHitCollection = 'ecalUncalibHit2:EcalUncalibRecHitsEE'
process.ecalEndcapLaserTask.EcalUncalibratedRecHitCollection = 'ecalUncalibHit2:EcalUncalibRecHitsEE'
#process.ecalEndcapLaserTask.laserWavelengths = [ 1, 2, 3, 4 ]
process.ecalEndcapLaserTask.laserWavelengths = [ 1, 4 ]
process.ecalEndcapLedTask.EcalUncalibratedRecHitCollection = 'ecalUncalibHit2:EcalUncalibRecHitsEE'
#process.ecalEndcapLedTask.ledWavelengths = [ 1, 2 ]
process.ecalEndcapLedTask.ledWavelengths = [ 1 ]
process.ecalEndcapTimingTask.EcalUncalibratedRecHitCollection = 'ecalUncalibHit2:EcalUncalibRecHitsEE'

#process.ecalBarrelPedestalTask.MGPAGains = [ 1, 6, 12 ]
#process.ecalBarrelPedestalTask.MGPAGains = [ 12 ]
#process.ecalBarrelPedestalTask.MGPAGainsPN = [ 1, 16 ]
#process.ecalBarrelPedestalTask.MGPAGainsPN = [ 16 ]

#process.ecalBarrelTestPulseTask.MGPAGains = [ 1, 6, 12 ]
#process.ecalBarrelTestPulseTask.MGPAGains = [ 12 ]
#process.ecalBarrelTestPulseTask.MGPAGainsPN = [ 1, 16 ]
#process.ecalBarrelTestPulseTask.MGPAGainsPN = [ 16 ]

#process.ecalEndcapPedestalTask.MGPAGains = [ 1, 6, 12 ]
#process.ecalEndcapPedestalTask.MGPAGains = [ 12 ]
#process.ecalEndcapPedestalTask.MGPAGainsPN = [ 1, 16 ]
#process.ecalEndcapPedestalTask.MGPAGainsPN = [ 16 ]

#process.ecalEndcapTestPulseTask.MGPAGains = [ 1, 6, 12 ]
#process.ecalEndcapTestPulseTask.MGPAGains = [ 12 ]
#process.ecalEndcapTestPulseTask.MGPAGainsPN = [ 1, 16 ]
#process.ecalEndcapTestPulseTask.MGPAGainsPN = [ 16 ]

process.simEcalTriggerPrimitiveDigis.Label = 'ecalEBunpacker'
process.simEcalTriggerPrimitiveDigis.InstanceEB = 'ebDigis'
process.simEcalTriggerPrimitiveDigis.InstanceEE = 'eeDigis'

process.EcalTrigPrimESProducer.DatabaseFile = 'TPG_startup.txt.gz'

process.ecalBarrelMonitorClient.dbName = dbName
process.ecalBarrelMonitorClient.dbHostName = dbHostName
process.ecalBarrelMonitorClient.dbHostPort = dbHostPort
process.ecalBarrelMonitorClient.dbUserName = dbUserName
process.ecalBarrelMonitorClient.dbPassword = dbPassword
process.ecalBarrelMonitorClient.dbTagName = 'CMSSW'
process.ecalBarrelMonitorClient.maskFile = ''
process.ecalBarrelMonitorClient.location = 'P5_Co'
#process.ecalBarrelMonitorClient.laserWavelengths = [ 1, 2, 3, 4 ]
process.ecalBarrelMonitorClient.laserWavelengths = [ 1, 4 ]
#process.ecalBarrelMonitorClient.MGPAGains = [ 1, 6, 12 ]
#process.ecalBarrelMonitorClient.MGPAGains = [ 12 ]
#process.ecalBarrelMonitorClient.MGPAGainsPN = [ 1, 16 ]
#process.ecalBarrelMonitorClient.MGPAGainsPN = [ 16 ]
process.ecalBarrelMonitorClient.enabledClients = ['Integrity', 'Occupancy', 'StatusFlags', 'PedestalOnline', 'Pedestal', 'TestPulse', 'Laser', 'Timing', 'Cosmic', 'TriggerTower', 'Cluster', 'Summary']

process.ecalEndcapMonitorClient.dbName = dbName
process.ecalEndcapMonitorClient.dbHostName = dbHostName
process.ecalEndcapMonitorClient.dbHostPort = dbHostPort
process.ecalEndcapMonitorClient.dbUserName = dbUserName
process.ecalEndcapMonitorClient.dbPassword = dbPassword
process.ecalEndcapMonitorClient.dbTagName = 'CMSSW'
process.ecalEndcapMonitorClient.maskFile = ''
process.ecalEndcapMonitorClient.location = 'P5_Co'
#process.ecalEndcapMonitorClient.laserWavelengths = [ 1, 2, 3, 4 ]
process.ecalEndcapMonitorClient.laserWavelengths = [ 1, 4 ]
#process.ecalEndcapMonitorClient.ledWavelengths = [ 1, 2 ]
process.ecalEndcapMonitorClient.ledWavelengths = [ 1 ]
#process.ecalEndcapMonitorClient.MGPAGains = [ 1, 6, 12 ]
#process.ecalEndcapMonitorClient.MGPAGains = [ 12 ]
#process.ecalEndcapMonitorClient.MGPAGainsPN = [ 1, 16 ]
#process.ecalEndcapMonitorClient.MGPAGainsPN = [ 16 ]
process.ecalEndcapMonitorClient.enabledClients = ['Integrity', 'Occupancy', 'StatusFlags', 'PedestalOnline', 'Pedestal', 'TestPulse', 'Laser', 'Led', 'Timing', 'Cosmic', 'TriggerTower', 'Cluster', 'Summary']

process.hybridSuperClusters.HybridBarrelSeedThr = 0.150
process.hybridSuperClusters.step = 1
process.hybridSuperClusters.eseed = 0.150

process.multi5x5BasicClusters.IslandBarrelSeedThr = 0.150
process.multi5x5BasicClusters.IslandEndcapSeedThr = 0.150

process.multi5x5SuperClusters.seedTransverseEnergyThreshold = 0.150

process.DQM.collectorHost = ''

#process.DQMStore.referenceFileName = '/data/ecalod-disk01/dqm-data/reference/REFERENCE.root'

EOF2

close CONFIGFILE;

$task = "source $cmssw_setup ; cd $cmssw_path ; eval `scramv1 runtime -sh` ; cd $config{'ec_mon_master_rundir'}/dqm-data/tmp/ ; TNS_ADMIN=/etc ; time cmsRun --parameter-set monitor-$runnum.py";

if ( -e "$config{'ec_mon_master_rundir'}/dqm-data/logs/$runnum.cmssw.log" ) {
  system("rm -f $config{'ec_mon_master_rundir'}/dqm-data/logs/$runnum.cmssw.log >> /dev/null 2>&1");
}

my $status = system("($task) > $config{'ec_mon_master_rundir'}/dqm-data/logs/$runnum.cmssw.log 2>&1");

system("mv -f $config{'ec_mon_master_rundir'}/dqm-data/tmp/monitor-$runnum.py $config{'ec_mon_master_rundir'}/dqm-data/logs/ >> /dev/null 2>&1");

system("mv -f $config{'ec_mon_master_rundir'}/dqm-data/tmp/DQM_*_R0$num.root $config{'ec_mon_master_rundir'}/dqm-data/root/ >> /dev/null 2>&1");

exit $status >> 8;

############################################################################

sub usage {
  print STDERR <<INLINE_LITERAL_TEXT;
usage: ec_mon_cmssw_task_wrapper [ --run <run_number> | --file /pathname/filename ]
INLINE_LITERAL_TEXT

  exit;
}
