#!/usr/bin/env perl

use strict "vars";
use vars qw( %opts );
use vars qw( %config );
use vars qw( @FILTER );

use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();
GetOptions( \%opts,
                "conf|c=s",
                "short",
                "html",
                "reverse",
                "last=s",
                "daq_run",
                "daq_done",
                "daq_empty",
                "daq_fail",
                "daq_abort",
                "mon_run",
                "mon_done",
                "mon_fail",
                "set_status|s=s",
                "type|t=s",
                "date=s",
                "time=s",
                "nocolor",
                "output|o=s",
                "debug|d",
                "help|h"
);
usage() if ( $opts{'help'} || $Getopt::Long::error );

use File::Basename;

unshift(@INC, dirname($0));
require "ec_mon_utils.pl";

ec_mon_conf_file();

my $hostname = `hostname -s`;
chomp $hostname;

if ( $opts{'set_status'} ) {
  if ( $opts{'set_status'} ne 'daq_run' && $opts{'set_status'} ne 'daq_done' && $opts{'set_status'} ne 'daq_empty' && $opts{'set_status'} ne 'daq_fail' && $opts{'set_status'} ne 'daq_abort' && $opts{'set_status'} ne 'mon_run' && $opts{'set_status'} ne 'mon_done' && $opts{'set_status'} ne 'mon_fail' ) {
  die "Invalid --status flag.\n";
  }
}

print "Checking runs in $config{'ec_mon_master_rundir'}/daq-data/\n" if ( $opts{'debug'} );

my $filteropts = $opts{'daq_run'} || $opts{'daq_done'} || $opts{'daq_empty'} || $opts{'daq_fail'} || $opts{'daq_abort'} ||
  $opts{'mon_run'} || $opts{'mon_done'} || $opts{'mon_fail'};

if ( $filteropts ) {
  push @FILTER, "daq_run"   if ( $opts{'daq_run'}   );
  push @FILTER, "daq_done"  if ( $opts{'daq_done'}  );
  push @FILTER, "daq_empty" if ( $opts{'daq_empty'} );
  push @FILTER, "daq_fail"  if ( $opts{'daq_fail'}  );
  push @FILTER, "daq_abort" if ( $opts{'daq_abort'} );
  push @FILTER, "mon_run"   if ( $opts{'mon_run'}   );
  push @FILTER, "mon_done"  if ( $opts{'mon_done'}  );
  push @FILTER, "mon_fail"  if ( $opts{'mon_fail'}  );
} else {
  @FILTER = qw{daq_run daq_done daq_empty daq_fail daq_abort mon_run mon_done mon_fail};
}

print "Filter options: @FILTER\n" if ( $opts{'debug'} );

my ( $runnumcolor, $endcolor );
my ( $daq_runcolor, $daq_donecolor, $daq_emptycolor, $daq_failcolor, $daq_abortcolor );
my ( $mon_runcolor, $mon_donecolor, $mon_failcolor );
unless( $opts{'nocolor'} ) {
  $runnumcolor    = "";
  $daq_runcolor   = "[01;34m";
  $daq_donecolor  = "[01;93m";
  $daq_emptycolor = "[01;31m";
  $daq_failcolor  = "[01;31m";
  $daq_abortcolor = "[01;31m";
  $mon_runcolor   = "[01;94m";
  $mon_donecolor  = "[01;92m";
  $mon_failcolor  = "[01;31m";
  $endcolor       = "[00m";
} else {
  $runnumcolor    = "";
  $daq_runcolor   = "";
  $daq_donecolor  = "";
  $daq_emptycolor = "";
  $daq_failcolor  = "";
  $daq_abortcolor = "";
  $mon_runcolor   = "";
  $mon_donecolor  = "";
  $mon_failcolor  = "";
  $endcolor       = "";
}

print "[00m" unless( $opts{'set_status'} || $opts{'nocolor'} || $opts{'short'} );

if ( $opts{'output'} ) {
  open STDOUT, ">$opts{'output'}" || warn "WARNING: Could not open output for needed commands.\n";
}

my @runlist = split('\n', select_runs( get_runs(), @ARGV ) );

my $numruns = @runlist;
if ( $numruns == 0 ) {
  exit 0;
}

unless ( $opts{'set_status'} || $opts{'short'} ) {
  print "-------------------------------------------------------------------------------------------------------------------\n";
  print "Run                                                    RunType                       Status    Date     Time   File\n";
  print "-------------------------------------------------------------------------------------------------------------------\n";
}

my $daq_run = 0;
my $daq_done = 0;
my $daq_empty = 0;
my $daq_fail = 0;
my $daq_abort = 0;
my $mon_run = 0;
my $mon_done = 0;
my $mon_fail = 0;

sub bydate {

  my $da = (stat("$config{'ec_mon_master_rundir'}/dqm-data/status/.$a"))[9];
  my $db = (stat("$config{'ec_mon_master_rundir'}/dqm-data/status/.$b"))[9];

  if ( defined($da) && defined($db) ) {
    if ( $opts{'reverse'} ) {
      $db <=> $da;
    } else {
      $da <=> $db;
    }
  }
}

my $run;
my @sorted_runlist = sort bydate @runlist;

my @new_runlist;

if ( $opts{'last'} ) {
  if ( $opts{'reverse'} ) {
    @new_runlist = @sorted_runlist[0..$opts{'last'}-1];
  } else {
    @new_runlist = @sorted_runlist[-$opts{'last'}..-1];
  }
} else {
  @new_runlist = @sorted_runlist;
}

foreach $run ( @new_runlist ) {

  my ($loc, $num, $lun, $out, $fun, $fil, $ful, $typ, $sta) = split('\.', $run);
  my $runnum = "$loc.$num.$lun.$out.$fun.$fil.$ful";
  my $status = $sta;
  print "run   =$run\nrunnum=$runnum\nstatus=$status\n" if ( $opts{'debug'} );

  if ( $opts{'set_status'} ) {
    foreach my $filteropt ( @FILTER ) {
      if ( $status =~ /$filteropt/ && $status ne $opts{'set_status'} ) {
        print "changing status of run $runnum from $status to $opts{'set_status'}\n";
        my $runfil = "$loc.$num.$lun.$out.$fun.$fil.$ful.$typ";
        open LOGFILE, ">>$config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'}";
        print LOGFILE localtime()." - ec_mon_check: changing status of run $runnum from $status to $opts{'set_status'}\n";
        close LOGFILE;
        system("mv -f $config{'ec_mon_master_rundir'}/dqm-data/status/.$runfil.$status $config{'ec_mon_master_rundir'}/dqm-data/status/.$runfil.$opts{'set_status'}");
        $status = $opts{'set_status'};
      }
    }
  } else {
    my $idsm = '';
    my $type = '';
    my $vers = '';
    my $subt = '';
    my $numb = '';

    my $date = 'n.a.';
    my $time = 'n.a.';
    my $file = 'disk';

    ($vers, $numb, $idsm, $type, $subt) = split('\.', $runnum);

    if ( defined $sta ) {
      $type = $typ;
    } else {
      $type = '-';
    }

    my $runfil;
    if ( defined $sta ) {
      $runfil = "$runnum.$type";
    } else {
      $runfil = "$runnum";
    }

    my $lastupdate;
    $lastupdate = (stat("$config{'ec_mon_master_rundir'}/dqm-data/status/.$runfil.$status"))[9];

    if ( defined($lastupdate) ) {
      $date = sprintf("%4i%02i%02i", 1900 + (localtime($lastupdate))[5], (localtime($lastupdate))[4] + 1, (localtime($lastupdate))[3]);
      $time = sprintf("%02i%02i%02i", (localtime($lastupdate))[2], (localtime($lastupdate))[1], (localtime($lastupdate))[0]);
    }

    if ( -e "$config{'ec_mon_master_rundir'}/daq-data/$loc.$num.$lun.$out.$fun.$fil.$ful.archived" ) {
      $file = 'tape';
    }

    if ( $opts{'html'} ) {
      if ( $status eq "mon_done" ) {
        if ( ! ( -e "$config{'ec_mon_master_rundir'}/dqm-data/html/0$numb" ) ) {
          $status = "mon_fail";
        }
      }
    }

    unless ( $opts{'short'} ) { $runnum = sprintf("%-54s", $runnum); }
    $status = sprintf("%-9s", $status);
    $type = sprintf("%-29s", $type);
    $date = sprintf("%-8s", $date);
    $time = sprintf("%-6s", $time);
    $file = sprintf("%-4s", $file);

    if ( ( ! defined($opts{'type'}) || $type =~ /^$opts{'type'}/ ) &&
         ( ! defined($opts{'date'}) || $date =~ /^$opts{'date'}/ ) &&
         ( ! defined($opts{'time'}) || $time =~ /^$opts{'time'}/ ) ) {
      foreach my $filteropt ( @FILTER ) {
        if ( $status =~ /$filteropt/ ) {

          $daq_run   +=1 if ( $status =~ /daq_run/ );
          $daq_done  +=1 if ( $status =~ /daq_done/ );
          $daq_empty +=1 if ( $status =~ /daq_empty/ );
          $daq_fail  +=1 if ( $status =~ /daq_fail/ );
          $daq_abort +=1 if ( $status =~ /daq_abort/ );
          $mon_run   +=1 if ( $status =~ /mon_run/ );
          $mon_done  +=1 if ( $status =~ /mon_done/ );
          $mon_fail  +=1 if ( $status =~ /mon_fail/ );

          $status =~ s/daq_run/${daq_runcolor}daq_run${endcolor}/;
          $status =~ s/daq_done/${daq_donecolor}daq_done${endcolor}/;
          $status =~ s/daq_empty/${daq_emptycolor}daq_empty${endcolor}/;
          $status =~ s/daq_fail/${daq_failcolor}daq_fail${endcolor}/;
          $status =~ s/daq_abort/${daq_abortcolor}daq_abort${endcolor}/;
          $status =~ s/mon_run/${mon_runcolor}mon_run${endcolor}/;
          $status =~ s/mon_done/${mon_donecolor}mon_done${endcolor}/;
          $status =~ s/mon_fail/${mon_failcolor}mon_fail${endcolor}/;

          unless ( $opts{'short'} ) {
            print "$runnumcolor$runnum$endcolor $type $status $date $time $file\n";
          } else {
            if ( defined $sta ) {
              print "$runnum.$type\n";
            } else {
              print "$runnum\n";
            }
          }
        }
      }
    }
  }

}

print "[m" unless( $opts{'set_status'} || $opts{'nocolor'} || $opts{'short'} );

unless ( $opts{'set_status'} || $opts{'short'} ) {
  print "-------------------------------------------------------------------------------------------------------------------\n";
  print "Summary\n";
  printf "daq: %2d running %2d done %2d empty %2d failed %2d aborted\n", $daq_run, $daq_done, $daq_empty, $daq_fail, $daq_abort;
  printf "mon: %2d running %2d done %2d failed\n", $mon_run, $mon_done, $mon_fail;
}

exit 0;

################################################################

sub select_runs {

  my ($oldrunlist, $runrange) = @_;
  my $newrunlist ='';

  if ( $runrange ) {
    print "Filter runrange: $runrange\n" if ( $opts{'debug'} );
    my $start = 0;
    my $stop = 0;
    foreach my $range ( split(',', $runrange )) {
      ($start, $stop) = split('#', $range);
      if ( defined($start) && defined($stop) ) {
        print "start=$start, stop=$stop\n" if ( $opts{'debug'} );
        if ( $stop lt $start ) {
          die "The run $stop is less than $start in given range.\n";
        }
      } else {
        $stop = $start = $range;
        print "start=$start, stop=$stop\n" if ( $opts{'debug'} );
      }

      print "oldrunlist=$oldrunlist\n" if ( $opts{'debug'} );
      foreach my $run ( split('\n', $oldrunlist) ) {
        my ($loc, $num, $lun, $out, $fun, $fil, $ful, $typ, $sta) = split('\.', $run);
        my $runnum = "$loc.$num.$lun.$out.$fun.$fil.$ful";
        print "runnum=$runnum\n" if ( $opts{'debug'} );
        if ( $runnum ge $start && $runnum le $stop ) {
          $newrunlist .= $run."\n";
        }
        print "newrunlist=$newrunlist\n" if ( $opts{'debug'} );
      }
    }
  } else {
    $newrunlist = $oldrunlist;
  }
  return $newrunlist;
}

sub get_runs {

  my $runlist = '';

  my %filelist;

  open ( LIST, "find $config{'ec_mon_master_rundir'}/daq-data/ \\( -name 'ecal_local.*.*.A.*.*.*.dat' -or -name 'ecal_local.*.*.A.*.*.*.archived' -or -name 'Global*.*.*.A.*.*.*.dat' -or -name 'MW*.*.*.A.*.*.*.dat' -or -name 'PrivCal*.*.*.A.*.*.*.dat' -or -name 'TransferTestWithSafety.*.*.A.*.*.*.dat' -or -name 'CRUZET*.*.*.A.*.*.*.dat' -or -name 'CRAFT.*.*.A.*.*.*.dat' \\) -printf '%f\n' -maxdepth 1 | sort |");
  while ( <LIST> ) {
    my @fields = split('\.', $_);
    $filelist{ $fields[1] } = $_;
  }
  close( LIST );

  opendir ( DIR, "$config{'ec_mon_master_rundir'}/dqm-data/status/" );
  while ( defined(my $filename = readdir( DIR )) ) {
    if ( $filename ne '.' && $filename ne '..' && $filename =~ /^\.ecal_local/ ) {
      print "Looking at $filename\n" if ( $opts{'debug'} );
      my ($loc, $num, $lun, $out, $fun, $fil, $ful, $typ, $sta) = split('\.', substr($filename, 1));
      my $runnum;
      if ( defined $num ) {
        if ( exists $filelist{$num} ) {
          $runlist .= substr($filename, 1)."\n";
          print "runlist=$runlist\n" if ( $opts{'debug'} );
        }
      }
    }
  }
  closedir( DIR );

  return $runlist;
}

sub usage {
  print STDERR <<INLINE_LITERAL_TEXT;
usage: ec_mon_check [options] [run1#run2]

If a run range is not specified ec_mon_check will look through all available
runs.

Options are:
  --conf          Needs a path name to use a ec_mon.conf from a location
                  other than the current directory

  --nocolor       Do not use color in the output

  --short         Print only the run names

  --html          Check for the availability of the html output

  --reverse       List new runs first (default is to list new runs last)

  --last N        List last N runs only

  --set_status S  Change the status of the run to S

  --type T        Select only runs of type T

  --date CCYYMMDD Select only runs matching this date
  --time hhmmss   Select only runs matching this time

  --debug
INLINE_LITERAL_TEXT

  exit;
}

################################################################

