#!/usr/bin/env perl

use strict "vars";
use vars qw( %opts );
use vars qw( %config );

use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();
GetOptions( \%opts,
                "run|r=s",
                "file|f=s",
                "help|h"
);
usage() if ( $opts{'help'} || $Getopt::Long::error );

my $runnum = $opts{'run'};
my $filnam = $opts{'file'};

usage() if ( ! $runnum && ! $filnam );

use File::Basename;

unshift(@INC, dirname($0));
require "ec_mon_utils.pl";

ec_mon_conf_file();

my $dbName     = '0';
my $dbHostName = '0';
my $dbHostPort = 1521;
my $dbUserName = 'foo';
my $dbPassword = 'foo';

if ( -e "$config{'ec_mon_path'}/.omds.conf" ) {
  eval `cat $config{'ec_mon_path'}/.omds.conf`;
}

my ($loc, $num, $lun, $out, $fun, $fil, $ful) = split('\.', $runnum);

if ( $runnum ) {
  exit 0 unless ( -e "$config{'ec_mon_master_rundir'}/dqm-data/status/.$runnum.PEDESTAL-OFFSET_SCAN.daq_done" ||
                  -e "$config{'ec_mon_master_rundir'}/dqm-data/status/.$runnum.PEDESTAL-OFFSET_SCAN.mon_run" ||
                  -e "$config{'ec_mon_master_rundir'}/dqm-data/status/.$runnum.PEDESTAL-OFFSET_SCAN.mon_done" ||
                  -e "$config{'ec_mon_master_rundir'}/dqm-data/status/.$runnum.PEDESTAL-OFFSET_SCAN.mon_fail" );
}

my @filelist = split('\n', `find $config{'ec_mon_master_rundir'}/daq-data/ \\( -name 'ecal_local.$num.*.A.$fun.*.*.dat' -or -name 'Global*.$num.*.A.$fun.*.*.dat' -or -name 'MW*.$num.*.A.$fun.*.*.dat' -or -name 'PrivCal*.$num.*.A.$fun.*.*.dat' -or -name 'TransferTestWithSafety.$num.*.A.$fun.*.*.dat' -or -name 'CRUZET*.$num.*.A.$fun.*.*.dat' -or -name 'CRAFT.$num.*.A.$fun.*.*.dat' \\) -printf '%f\n' -maxdepth 1 | sort`);

my @filelist_archived = split('\n', `find $config{'ec_mon_master_rundir'}/daq-data/trash/ \\( -name 'ecal_local.$num.*.A.$fun.*.*.dat' -or -name 'Global*.$num.*.A.$fun.*.*.dat' -or -name 'MW*.$num.*.A.$fun.*.*.dat' -or -name 'PrivCal*.$num.*.A.$fun.*.*.dat' -or -name 'TransferTestWithSafety.$num.*.A.$fun.*.*.dat' -or -name 'CRUZET*.$num.*.A.$fun.*.*.dat' -or -name 'CRAFT.$num.*.A.$fun.*.*.dat' \\) -printf '%f\n' -maxdepth 1 | sort`);

if ( $runnum ) {
  exit 1 unless ( @filelist != 0 ||
                  @filelist_archived != 0 );
}

if ( $filnam ) {
  if ( -e "$filnam" ) {
    $runnum = basename($filnam);
  } else {
    print "file: $filnam does not exist ...\n";
    exit 1;
  }
}

my $cmssw_setup = "/cmssrv0/nfshome0/cmssw2/scripts/setup.sh";

my $cmssw_path = "/nfshome0/ecalpro/DQM/CMSSW_current";

my $xml_path = "/nfshome0/ecalpro/XML-DQM";

exit 1 unless ( -e "$cmssw_path" );

my $task;

if ( -e "$config{'ec_mon_master_rundir'}/dqm-data/tmp/pedestal-offset-$runnum.py" ) {
  system("rm -f $config{'ec_mon_master_rundir'}/dqm-data/tmp/pedestal-offset-$runnum.py >> /dev/null 2>&1");
}

open CONFIGFILE, ">>$config{'ec_mon_master_rundir'}/dqm-data/tmp/pedestal-offset-$runnum.py";

print CONFIGFILE <<EOF1;
import FWCore.ParameterSet.Config as cms

process = cms.Process("ECALDQM")

process.load("EventFilter.EcalRawToDigiDev.EcalUnpackerMapping_cfi")
process.load("EventFilter.EcalRawToDigiDev.EcalUnpackerData_cfi")

process.load("Geometry.EcalMapping.EcalMapping_cfi")

process.load("Geometry.EcalMapping.EcalMappingRecord_cfi")

process.ecalPedOffset = cms.EDAnalyzer("EcalPedOffset",
    EBdigiCollection = cms.InputTag("ecalEBunpacker","ebDigis"),
    EEdigiCollection = cms.InputTag("ecalEBunpacker","eeDigis"),
    headerCollection = cms.InputTag("ecalEBunpacker"),

    DACmin = cms.untracked.int32(40),
    DACmax = cms.untracked.int32(90),
    RMSmax = cms.untracked.double(20.0),

    bestPed = cms.untracked.int32(200),
    minSlopeAllowed = cms.untracked.double(-18.0),
    maxSlopeAllowed = cms.untracked.double(-29.0),
    maxChi2OverNDF = cms.untracked.double(5.25),

    dbName = cms.untracked.string('$dbName'),
    dbHostName = cms.untracked.string('$dbHostName'),
    dbHostPort = cms.untracked.int32($dbHostPort),
    dbUserName = cms.untracked.string('$dbUserName'),
    dbPassword = cms.untracked.string('$dbPassword'),

    createMonIOV = cms.untracked.bool(False),
    location = cms.untracked.string('P5_Co'),

EOF1

printf CONFIGFILE "    run = cms.int32(%d),\n", $num;

printf CONFIGFILE "    xmlFile = cms.string('pedestal-offset-%s'),\n", $runnum;
printf CONFIGFILE "    plotting = cms.string('pedestal-offset-%s')\n", $runnum;

print CONFIGFILE <<EOF2;
)

process.printAscii = cms.OutputModule("AsciiOutputModule",
    prescale = cms.untracked.uint32(10)
)

process.source = cms.Source("NewEventStreamFileReader",
EOF2

if ( $filnam ) {
  printf CONFIGFILE "    fileNames = cms.untracked.vstring('file:$filnam')\n";
} elsif ( @filelist != 0 ) {
  my $i=0;
  printf CONFIGFILE "    fileNames = cms.untracked.vstring(";
  printf CONFIGFILE "'file:$config{'ec_mon_master_rundir'}/daq-data/$filelist[$i]'";
  for ($i=1; $i < @filelist && $i < 255; $i++) {
    printf CONFIGFILE ",\n";
    printf CONFIGFILE "                                      'file:$config{'ec_mon_master_rundir'}/daq-data/$filelist[$i]'";
  }
  printf CONFIGFILE ")\n";
} elsif ( @filelist_archived != 0 ) {
  my $i=0;
  printf CONFIGFILE "    fileNames = cms.untracked.vstring(";
  printf CONFIGFILE "'file:$config{'ec_mon_master_rundir'}/daq-data/trash/$filelist_archived[$i]'";
  for ($i=1; $i < @filelist_archived && $i < 255; $i++) {
    printf CONFIGFILE ",\n";
    printf CONFIGFILE "                                      'file:$config{'ec_mon_master_rundir'}/daq-data/trash/$filelist_archived[$i]'";
  }
  printf CONFIGFILE ")\n";
} else {
  exit 1;
}

print CONFIGFILE <<EOF3;
)

process.MessageLogger = cms.Service("MessageLogger",
    cout = cms.untracked.PSet(
        threshold = cms.untracked.string('WARNING'),
        noLineBreaks = cms.untracked.bool(True),
        noTimeStamps = cms.untracked.bool(True),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        EcalRawToDigiDev = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevTriggerType = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevTpg = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevNumTowerBlocks = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevTowerId = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevTowerSize = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevChId = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevGainZero = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevGainSwitch = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevDccBlockSize = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevMemBlock = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevMemTowerId = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevMemChId = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevMemGain = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevTCC = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDevSRP = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalDCCHeaderRuntypeDecoder = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalPedOffset = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        )
    ),
    categories = cms.untracked.vstring('EcalRawToDigiDev',
                                       'EcalRawToDigiDevTriggerType',
                                       'EcalRawToDigiDevTpg',
                                       'EcalRawToDigiDevNumTowerBlocks',
                                       'EcalRawToDigiDevTowerId',
                                       'EcalRawToDigiDevTowerSize',
                                       'EcalRawToDigiDevChId',
                                       'EcalRawToDigiDevGainZero',
                                       'EcalRawToDigiDevGainSwitch',
                                       'EcalRawToDigiDevDccBlockSize',
                                       'EcalRawToDigiDevMemBlock',
                                       'EcalRawToDigiDevMemTowerId',
                                       'EcalRawToDigiDevMemChId',
                                       'EcalRawToDigiDevMemGain',
                                       'EcalRawToDigiDevTCC',
                                       'EcalRawToDigiDevSRP',
                                       'EcalDCCHeaderRuntypeDecoder',
                                       'EcalPedOffset'),
    destinations = cms.untracked.vstring('cout')
)

process.p = cms.Path(process.ecalEBunpacker*process.ecalPedOffset)
process.q = cms.EndPath(process.printAscii)

process.ecalEBunpacker.silentMode = False

EOF3

close CONFIGFILE;

$task = "source $cmssw_setup ; cd $cmssw_path ; eval `scramv1 runtime -sh` ; cd $config{'ec_mon_master_rundir'}/dqm-data/tmp/ ; TNS_ADMIN=/etc ; time cmsRun --parameter-set pedestal-offset-$runnum.py";

if ( -e "$config{'ec_mon_master_rundir'}/dqm-data/logs/pedestal-offset-$runnum.log" ) {
  system("rm -f $config{'ec_mon_master_rundir'}/dqm-data/logs/pedestal-offset-$runnum.log >> /dev/null 2>&1");
}

my $status = system("($task) > $config{'ec_mon_master_rundir'}/dqm-data/logs/pedestal-offset-$runnum.log 2>&1");

system("mv -f $config{'ec_mon_master_rundir'}/dqm-data/tmp/pedestal-offset-$runnum.py $config{'ec_mon_master_rundir'}/dqm-data/logs/ >> /dev/null 2>&1");

system("mv -f $config{'ec_mon_master_rundir'}/dqm-data/tmp/pedestal-offset-$runnum\_*.xml $config{'ec_mon_master_rundir'}/dqm-data/xml/ >> /dev/null 2>&1");

system("cp $config{'ec_mon_master_rundir'}/dqm-data/xml/pedestal-offset-$runnum\_*.xml $xml_path/ >> /dev/null 2>&1");

system("mv -f $config{'ec_mon_master_rundir'}/dqm-data/tmp/pedestal-offset-$runnum.root $config{'ec_mon_master_rundir'}/dqm-data/xml/ >> /dev/null 2>&1");

exit $status >> 8;

############################################################################

sub usage {
  print STDERR <<INLINE_LITERAL_TEXT;
usage: ec_mon_cmssw_task_wrapper_pedestal-offset [ --run <run_number> | --file /pathname/filename ]
INLINE_LITERAL_TEXT

  exit;
}
