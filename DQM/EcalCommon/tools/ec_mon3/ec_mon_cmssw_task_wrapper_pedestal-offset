#!/usr/bin/env perl

use strict "vars";
use vars qw( %opts );
use vars qw( %config );

use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();
GetOptions( \%opts,
                "run|r=s",
                "file|f=s",
                "help|h"
);
usage() if ( $opts{'help'} || $Getopt::Long::error );

my $runnum = $opts{'run'};
my $filnam = $opts{'file'};

usage() if ( ! $runnum && ! $filnam );

use File::Basename;

unshift(@INC, dirname($0));
require "ec_mon_utils.pl";

ec_mon_conf_file();

my $statusdir = "$config{'ec_mon_master_rundir'}/dqm-data/status/";

my ($loc, $num, $lun, $out, $fun, $fil, $ful) = split('\.', $runnum);

if ( $runnum ) {
  exit 1 unless ( -e "$statusdir/.$runnum.PEDESTAL-OFFSET_SCAN.daq_done" ||
                  -e "$statusdir/.$runnum.PEDESTAL-OFFSET_SCAN.mon_run" ||
                  -e "$statusdir/.$runnum.PEDESTAL-OFFSET_SCAN.mon_done" ||
                  -e "$statusdir/.$runnum.PEDESTAL-OFFSET_SCAN.mon_fail" );
}

my $daqdir = "$config{'ec_mon_master_rundir'}/daq-data";
my $trashdir = "$config{'ec_mon_master_rundir'}/daq-data/trash";

my @filelist = split('\n', ec_mon_filelist("$daqdir/", $num, $out, 1));

my @filelist_archived = split('\n', ec_mon_filelist("$trashdir/", $num, $out, 1));

if ( $runnum ) {
  exit 1 unless ( @filelist != 0 ||
                  @filelist_archived != 0 );
}

if ( $filnam ) {
  if ( -e "$filnam" ) {
    $runnum = basename($filnam);
  } else {
    print "file: $filnam does not exist ...\n";
    exit 1;
  }
}

my $cmsenv;

if ( @filelist != 0 && $filelist[0] =~ /^Minidaq/ ) {
    $cmsenv = "/nfshome0/ecalpro/DQM/swconf/cmsenv.miniDAQ";
}
elsif ( $config{'ec_mon_path'} =~ /localDAQ/ ) {
    $cmsenv = "/nfshome0/ecalpro/DQM/swconf/cmsenv.localDAQ";
}
elsif ( $config{'ec_mon_path'} =~ /globalDAQ/ ) {
    $cmsenv = "/nfshome0/ecalpro/DQM/swconf/cmsenv.globalDAQ";
}
else {
    exit 1;
}

my $xml_path = "/nfshome0/ecalpro/XML-DQM";

my $workdir = "$config{'ec_mon_master_rundir'}/dqm-data/tmp";
my $cfgfile = "$workdir/monitor-$runnum.py";

if ( -e "$workdir/pedestal-offset-$runnum.py" ) {
  system("rm -f $workdir/pedestal-offset-$runnum.py >> /dev/null 2>&1");
}

open CONFIGFILE, ">>$workdir/pedestal-offset-$runnum.py";

print CONFIGFILE <<EOF1;
import FWCore.ParameterSet.Config as cms

import os
os.environ['TNS_ADMIN']='/etc'

dbName = ''
dbHostName = ''
dbHostPort = 1521
dbUserName = ''
dbPassword = ''

try:
  file = open('$config{'ec_mon_path'}/.cms_tstore.conf', 'r')
  for line in file:
    if line.find('dbName') >= 0:
      dbName = line.split()[2]
    if line.find('dbHostName') >= 0:
      dbHostName = line.split()[2]
    if line.find('dbHostPort') >= 0:
      dbHostPort = int(line.split()[2])
    if line.find('dbUserName') >= 0:
      dbUserName = line.split()[2]
    if line.find('dbPassword') >= 0:
      dbPassword = line.split()[2]
  file.close()
except IOError:
  pass

process = cms.Process("ECALDQM")

process.load("EventFilter.EcalRawToDigi.EcalUnpackerMapping_cfi")

process.load("EventFilter.EcalRawToDigi.EcalUnpackerData_cfi")

process.load("Geometry.EcalMapping.EcalMapping_cfi")

process.load("Geometry.EcalMapping.EcalMappingRecord_cfi")

process.load("CalibCalorimetry.EcalTrivialCondModules.EcalTrivialCondRetriever_cfi")

process.ecalPedOffset = cms.EDAnalyzer("EcalPedOffset",
    EBdigiCollection = cms.InputTag("ecalEBunpacker","ebDigis"),
    EEdigiCollection = cms.InputTag("ecalEBunpacker","eeDigis"),
    headerCollection = cms.InputTag("ecalEBunpacker"),

    DACmin = cms.untracked.int32(40),
    DACmax = cms.untracked.int32(90),
    RMSmax = cms.untracked.double(20.0),

    bestPed = cms.untracked.int32(200),
    minSlopeAllowed = cms.untracked.double(-18.0),
    maxSlopeAllowed = cms.untracked.double(-29.0),
    maxChi2OverNDF = cms.untracked.double(5.25),

    dbName = cms.untracked.string(dbName),
    dbHostName = cms.untracked.string(dbHostName),
    dbHostPort = cms.untracked.int32(dbHostPort),
    dbUserName = cms.untracked.string(dbUserName),
    dbPassword = cms.untracked.string(dbPassword),

    createMonIOV = cms.untracked.bool(False),
    location = cms.untracked.string('P5_Co'),

EOF1

printf CONFIGFILE "    run = cms.int32(%d),\n", $num;

printf CONFIGFILE "    xmlFile = cms.string('pedestal-offset-%s'),\n", $runnum;
printf CONFIGFILE "    plotting = cms.string('pedestal-offset-%s')\n", $runnum;

print CONFIGFILE <<EOF2;
)

process.printAscii = cms.OutputModule("AsciiOutputModule",
    prescale = cms.untracked.uint32(10)
)

process.source = cms.Source("NewEventStreamFileReader",
EOF2

if ( $filnam ) {
  printf CONFIGFILE "    fileNames = cms.untracked.vstring('file:$filnam')\n";
} elsif ( @filelist != 0 ) {
  my $i=0;
  printf CONFIGFILE "    fileNames = cms.untracked.vstring(";
  printf CONFIGFILE "'file:$config{'ec_mon_master_rundir'}/daq-data/$filelist[$i]'";
  for ($i=1; $i < @filelist && $i < 255; $i++) {
    printf CONFIGFILE ",\n";
    printf CONFIGFILE "                                      'file:$config{'ec_mon_master_rundir'}/daq-data/$filelist[$i]'";
  }
  printf CONFIGFILE ")\n";
} elsif ( @filelist_archived != 0 ) {
  my $i=0;
  printf CONFIGFILE "    fileNames = cms.untracked.vstring(";
  printf CONFIGFILE "'file:$config{'ec_mon_master_rundir'}/daq-data/trash/$filelist_archived[$i]'";
  for ($i=1; $i < @filelist_archived && $i < 255; $i++) {
    printf CONFIGFILE ",\n";
    printf CONFIGFILE "                                      'file:$config{'ec_mon_master_rundir'}/daq-data/trash/$filelist_archived[$i]'";
  }
  printf CONFIGFILE ")\n";
} else {
  exit 1;
}

print CONFIGFILE <<EOF3;
)

process.MessageLogger = cms.Service("MessageLogger",
    cout = cms.untracked.PSet(
        threshold = cms.untracked.string('WARNING'),
        noLineBreaks = cms.untracked.bool(True),
        noTimeStamps = cms.untracked.bool(True),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        EcalRawToDigi = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiTriggerType = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiTpg = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiNumTowerBlocks = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiTowerId = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiTowerSize = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiChId = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiGainZero = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiGainSwitch = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiDccBlockSize = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiMemBlock = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiMemTowerId = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiMemChId = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiMemGain = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiTCC = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalRawToDigiSRP = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalDCCHeaderRuntypeDecoder = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        ),
        EcalPedOffset = cms.untracked.PSet(
            limit = cms.untracked.int32(1000)
        )
    ),
    categories = cms.untracked.vstring('EcalRawToDigi',
                                       'EcalRawToDigiTriggerType',
                                       'EcalRawToDigiTpg',
                                       'EcalRawToDigiNumTowerBlocks',
                                       'EcalRawToDigiTowerId',
                                       'EcalRawToDigiTowerSize',
                                       'EcalRawToDigiChId',
                                       'EcalRawToDigiGainZero',
                                       'EcalRawToDigiGainSwitch',
                                       'EcalRawToDigiDccBlockSize',
                                       'EcalRawToDigiMemBlock',
                                       'EcalRawToDigiMemTowerId',
                                       'EcalRawToDigiMemChId',
                                       'EcalRawToDigiMemGain',
                                       'EcalRawToDigiTCC',
                                       'EcalRawToDigiSRP',
                                       'EcalDCCHeaderRuntypeDecoder',
                                       'EcalPedOffset'),
    destinations = cms.untracked.vstring('cout')
)

process.p = cms.Path(process.ecalEBunpacker*process.ecalPedOffset)
process.q = cms.EndPath(process.printAscii)

process.ecalEBunpacker.silentMode = True
#process.ecalEBunpacker.InputLabel = cms.InputTag('rawDataCollector')

EOF3

close CONFIGFILE;

my $task = "source $cmsenv; cd $workdir ; time cmsRun pedestal-offset-$runnum.py";

my $logdir = "$config{'ec_mon_master_rundir'}/dqm-data/logs";
my $xmldir = "$config{'ec_mon_master_rundir'}/dqm-data/xml";

if ( -e "$logdir/pedestal-offset-$runnum.log" ) {
  system("rm -f $logdir/pedestal-offset-$runnum.log >> /dev/null 2>&1");
}

my $status = system("($task) > $logdir/pedestal-offset-$runnum.log 2>&1");

system("mv -f $workdir/pedestal-offset-$runnum.py $logdir/ >> /dev/null 2>&1");

system("mv -f $workdir/pedestal-offset-$runnum\_*.xml $xmldir/ >> /dev/null 2>&1");

system("cp $xmldir/pedestal-offset-$runnum\_*.xml $xml_path/ >> /dev/null 2>&1");

system("mv -f $workdir/pedestal-offset-$runnum.root $xmldir/ >> /dev/null 2>&1");

exit $status >> 8;

############################################################################

sub usage {
  print STDERR <<INLINE_LITERAL_TEXT;
usage: ec_mon_cmssw_task_wrapper_pedestal-offset [ --run <run_number> | --file /pathname/filename ]
INLINE_LITERAL_TEXT

  exit;
}
