#!/usr/bin/env perl

use strict "vars";
use vars qw( %opts );
use vars qw( %config );

use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();
GetOptions( \%opts,
                "debug|d",
                "norun",
                "archive_now",
                "help|h"
);
usage() if ( $opts{'help'} || $Getopt::Long::error );

# source location
my $matacq_data_dir = "/localdata/matacq-data";

# archive location
my $matacq_data_dropbox = "cms-tier0-stage:/dropbox/ecal/matacq-data";

#maximum number of files to be archived at each cycle
my $archive_maxfiles = 20;

#time after which to archive a file
my $archive_timeout = 1 *  1 * 60 * 60; # 60 minutes in secs
#my $archive_timeout = 1 *  1 * 10 * 60; # 10 minutes in secs

$archive_timeout = 0 if ( $opts{'archive_now'} );

unless ( -e $matacq_data_dir ) {

  print "$matacq_data_dir does not exist !\n";
  exit 1;

}

exit 1 if ( -e "$matacq_data_dir/.matacq_data_archive_lock" );

system("touch $matacq_data_dir/.matacq_data_archive_lock");

my @matacq_files;

@matacq_files = split('\n', `find $matacq_data_dir -maxdepth 1 -name 'matacq.*.dat' -printf '%f\n' | sort`);

my $file;

if ( @matacq_files == 0 ) {

  print "No files to archive\n" if ( $opts{'debug'} );

} else {

  my $numfiles = 0;

  foreach $file ( @matacq_files ) {

    $file =~ s/.dat//;;
    my $status;

    print "Processing file $file.dat\n" if ( $opts{'debug'} );

    unless ( -s "$matacq_data_dir/$file.dat" ) {

      print "Found empty file $file.dat\n" if ( $opts{'debug'} );

      my $update = (stat("$matacq_data_dir/$file.dat"))[9];
      my $time = ((( time() - $update ) / 60.) / 60.);

      printf "Last updated %.1f hours ago\n", $time if ( $opts{'debug'} );

      if ( ( time() - $update ) > $archive_timeout ) {

        print "Moving $matacq_data_dir/$file.dat to $matacq_data_dir/empty/: " if ( $opts{'debug'} );

        $status = 0;
        $status = system("mv -f $matacq_data_dir/$file.dat $matacq_data_dir/empty/") unless ( $opts{'norun'} );

        if ( ! $status ) {

          print "done\n" if ( $opts{'debug'} );

          open LOGFILE, ">>$matacq_data_dir/matacq_data_archive.log";
          print LOGFILE localtime()." - matacq_data_archive: moved $matacq_data_dir/$file.dat to $matacq_data_dir/empty/\n";
          close LOGFILE;

        } else {

          print "failed\n" if ( $opts{'debug'} );

          open LOGFILE, ">>$matacq_data_dir/matacq_data_archive.log";
          print LOGFILE localtime()." - matacq_data_archive: problems moving $matacq_data_dir/$file.dat to $matacq_data_dir/empty/\n";
          close LOGFILE;

          system("rm $matacq_data_dir/.matacq_data_archive_lock'}");
          exit 1;

        }

        next;

      }

    }

    if ( -e "$matacq_data_dir/$file.archived" ) {

      open FILE, "<$matacq_data_dir/$file.archived";
      my $f = <FILE>;
      close FILE;

      print "This file has been already archived\n" if ( $opts{'debug'} );

      if ( -e "$matacq_data_dir/$file.dat" ) {

        print "Moving $matacq_data_dir/$file.dat to $matacq_data_dir/trash/: " if ( $opts{'debug'} );

        $status = 0;
        $status = system("mv -f $matacq_data_dir/$file.dat $matacq_data_dir/trash/") unless ( $opts{'norun'} );

        if ( ! $status ) {
          print "done\n" if ( $opts{'debug'} );

          open LOGFILE, ">>$matacq_data_dir/matacq_data_archive.log";
          print LOGFILE localtime()." - matacq_data_archive: moved $matacq_data_dir/$file.dat to $matacq_data_dir/trash/\n";
          close LOGFILE;

        } else {

          print "failed\n" if ( $opts{'debug'} );

          open LOGFILE, ">>$matacq_data_dir/matacq_data_archive.log";
          print LOGFILE localtime()." - matacq_data_archive: problems moving $matacq_data_dir/$file.dat to $matacq_data_dir/trash/\n";
          close LOGFILE;

          system("rm $matacq_data_dir/.matacq_data_archive_lock'}");
          exit 1;

        }

      }

    } elsif ( -e "$matacq_data_dir/$file.dat" ) {

      $numfiles++;

      last if ( $numfiles > $archive_maxfiles );

      print "Found $matacq_data_dir/$file.dat on disk\n" if ( $opts{'debug'} );

      my $update = (stat("$matacq_data_dir/$file.dat"))[9];
      my $time = ((( time() - $update ) / 60.) / 60.);

      printf "Last updated %.1f hours ago\n", $time if ( $opts{'debug'} );

      if ( ( time() - $update ) > $archive_timeout ) {

        print "File $file.dat needs to be saved\n" if ( $opts{'debug'} );

        print "Transferring $matacq_data_dir/$file.dat to $matacq_data_dropbox/\n" if ( $opts{'debug'} );

        $status = 0;
        $status = system("scp -p -o StrictHostKeyChecking=no $matacq_data_dir/$file.dat $matacq_data_dropbox/ >> /dev/null 2>&1") unless ( $opts{'norun'} );

        if ( $status ) {

          print "Problems with the transfer of $matacq_data_dir/$file.dat\n";

          open LOGFILE, ">>$matacq_data_dir/matacq_data_archive.log";
          print LOGFILE localtime()." - matacq_data_archive: problems with the transfer of $matacq_data_dir/$file.dat";
          close LOGFILE;

          system("rm $matacq_data_dir/.matacq_data_archive_lock");
          exit 1;

        }

        unless ( $opts{'norun'} ) {
          open FILE, ">$matacq_data_dir/$file.archived";
          print FILE "$matacq_data_dropbox/$file.dat\n";
          close FILE;
        }

        print "Archived $matacq_data_dir/$file.dat as $matacq_data_dropbox/$file.dat\n" if ( $opts{'debug'} );

        open LOGFILE, ">>$matacq_data_dir/matacq_data_archive.log";
        print LOGFILE localtime()." - matacq_data_archive: archived $matacq_data_dir/$file.dat as $matacq_data_dropbox/$file.dat\n";
        close LOGFILE;

      }

    }

  }

}

system("rm $matacq_data_dir/.matacq_data_archive_lock");

exit 0;

############################################################################

sub usage {

        print STDERR <<INLINE_LITERAL_TEXT;
usage: matacq_data_archive [options]

Options are:
  --norun  Do not archive and delete the files, just list what would be done

  --debug
INLINE_LITERAL_TEXT

        exit;
}

############################################################################

