#!/usr/bin/env perl

use strict "vars";
use vars qw( %opts );
use vars qw( %config );

use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();
GetOptions( \%opts,
	    "debug|d",
	    "norun",
	    "help|h"
	    );
usage() if ( $opts{'help'} || $Getopt::Long::error );
usage() if ( @ARGV == 0 );

use File::Basename;

unshift(@INC, dirname($0));
require "ec_mon_utils.pl";

ec_mon_conf_file();

my $daqdir = "$config{'ec_mon_master_rundir'}/daq-data";
my $dqmdir = "$config{'ec_mon_master_rundir'}/dqm-data";
my $statusdir = "$dqmdir/status";
my $workdir = "$dqmdir/tmp";

exit 1 if ( -e "$dqmdir/.ec_mon_master_convert_lock$config{'ec_mon_master_name'}" );

system("touch $dqmdir/.ec_mon_master_convert_lock$config{'ec_mon_master_name'}");

my $run = $ARGV[0];

if( -e "$statusdir/.$run.converted" ) {
    print "This run has been already converted\n" if ( $opts{'debug'} );
    exit 0;
}

my ($loc, $num, $lun, $out, $fun, $fil, $ful, $typ) = split('\.', "$run");

my @datfiles = split('\n', `find $daqdir/ -maxdepth 1 -name '$loc.$num.*.dat' -printf '%f\n' 2>&1 | sort`);

if ( @datfiles == 0 ) {
    print "No files to convert for run $run\n" if ( $opts{'debug'} );
    exit 0;
}

foreach my $file ( @datfiles ) {

    $file =~ s/.dat//;
    $file =~ s/ *$//;

    ($loc, $num, $lun, $out, $fun, $fil, $ful) = split('\.', "$file");

    my $dest = "$daqdir/$loc.$num.$ful.$typ.root";

    if ( -e "$daqdir/$file.archived" ) {
	print "File $file.dat has been already archived\n" if ( $opts{'debug'} );
	next;
    }

    print "Checking existence on disk of run $file\n" if ( $opts{'debug'} );

    if ( ! -e "$daqdir/$file.dat" ) {
	print "File $file.dat disappeared!\n" if ( $opts{'debug'} );
	next;
    }

    print "Found $daqdir/$file.dat on disk. Converting to POOL\n" if ( $opts{'debug'} );
    
    open CFGFILE, ">>$workdir/convert-${file}_cfg.py";
    print CFGFILE <<EOF1;
import FWCore.ParameterSet.Config as cms
process = cms.Process("RAW")
process.source =   process.source = cms.Source("NewEventStreamFileReader",
    fileNames = cms.untracked.vstring('')
)
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(-1)
)
process.out = cms.OutputModule("PoolOutputModule",
    fileName = cms.untracked.string('')
)
process.ep = cms.EndPath(process.out)
EOF1

    printf CFGFILE "process.source.fileNames = cms.untracked.vstring('file:%s')\n", "$daqdir/$file.dat";
    printf CFGFILE "process.out.fileName = cms.untracked.string('%s')\n", "$dest";

    close CFGFIlE;

    my $status = 0;
    $status = system("source $config{'ec_mon_swconf_dir'}/cmsenv.localDAQ; cmsRun $workdir/convert-${file}_cfg.py > /dev/null 2>&1") unless ( $opts{'norun'} );

    if ( $status ) {

	print "Problems with the conversion of $daqdir/$file.dat\n";

	open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
	print LOGFILE localtime()." - ec_mon_convert: problems with the conversion of $daqdir/$file.dat\n";
	close LOGFILE;

	system("rm $dqmdir/.ec_mon_master_convert_lock$config{'ec_mon_master_name'}");
	system("rm $dest > /dev/null 2>&1");
	exit 1;

    }

    system("mv $workdir/convert-${file}_cfg.py $dqmdir/logs/");

    print "Converted $daqdir/$file.dat as $dest\n" if ( $opts{'debug'} );

    open LOGFILE, ">>$dqmdir/$config{'ec_mon_master_log'}";
    print LOGFILE localtime()." - ec_mon_convert: Converted $daqdir/$file.dat as $dest\n";
    close LOGFILE;
}

unless ( $opts{'norun'} ) {
    system("touch $statusdir/.$run.converted");
}

system("rm $dqmdir/.ec_mon_master_convert_lock$config{'ec_mon_master_name'}");

exit 0;

############################################################################

sub usage {

        print STDERR <<INLINE_LITERAL_TEXT;
usage: ec_mon_convert [options] RUN

Options are:
  --norun    Do not archive and delete the runs, just list what would be done

  --debug
INLINE_LITERAL_TEXT

        exit;
}

############################################################################


