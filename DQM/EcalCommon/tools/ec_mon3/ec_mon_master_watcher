#!/usr/bin/env perl -w

use strict "vars";
use vars qw( %opts );
use vars qw( %config );

use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();
GetOptions( \%opts,
                "conf|c=s",
                "norun",
                "debug|d",
                "help|h"
);
usage() if ( $opts{'help'} || $Getopt::Long::error );

use File::Basename;

unshift(@INC, dirname($0));
require "ec_mon_utils.pl";

ec_mon_conf_file();

my $timeout = 10 * 60; #10 minutes in secs

if ( -e "$config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'}" ) {

  print "Found $config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'} on disk\n" if ( $opts{'debug'} );

  my $update = (stat("$config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'}"))[9];
  my $time = ((( time() - $update ) / 60.) / 60.);

  printf "Last updated %.1f hours ago\n", $time if ( $opts{'debug'} );

  if ( ( time() - $update ) > $timeout ) {

    print "ec_mon_master is idle since too long, starting a new master.\n" if ( $opts{'debug'} );
    system("$config{'ec_mon_path'}/ec_mon_control -f start") unless ( $opts{'norun'} );

  }
} else {

  system("touch $config{'ec_mon_master_rundir'}/dqm-data/$config{'ec_mon_master_log'}") unless ( $opts{'norun'} );

}

exit 0;

############################################################################

sub usage {

  print STDERR <<INLINE_LITERAL_TEXT;
usage: ec_mon_master_watcher

  --conf   Needs a path name to use a ec_mon.conf from a location other
           than the current directory.

  --debug
INLINE_LITERAL_TEXT

  exit;
}

############################################################################
