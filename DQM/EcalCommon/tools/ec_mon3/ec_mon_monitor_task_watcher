#!/usr/bin/env perl

use strict "vars";
use vars qw( %opts );
use vars qw( %config );

use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();
GetOptions( \%opts,
                "conf|c=s",
                "norun",
                "debug|d",
                "help|h"
);
usage() if ( $opts{'help'} || $Getopt::Long::error );

use File::Basename;

unshift(@INC, dirname($0));
require "ec_mon_utils.pl";

ec_mon_conf_file();

my $timeout = 1 * 60 * 60; #1 hour in secs

my @mon_runs;

if ( $ARGV ) {
  @mon_runs = split('\n', `$config{'ec_mon_path'}/ec_mon_check --nocolor --short --mon_run --conf $config{'$ec_mon_conf'} @ARGV`);
} else {
  @mon_runs = split('\n', `$config{'ec_mon_path'}/ec_mon_check --nocolor --short --mon_run --conf $config{'$ec_mon_conf'}`);
}

my $run;

if ( @mon_runs == 0 ) {

  print "No runs to check\n" if ( $opts{'debug'} );

} else {

  foreach $run ( @mon_runs ) {

    $run =~ s/ *$//;
    my ($loc, $num, $lun, $out, $fun, $fil, $ful, $typ) = split('\.', "$run");
    $run = "$loc.$num.$lun.$out.$fun.$fil.$ful";

    if ( -e "$config{'ec_mon_master_rundir'}/dqm-data/logs/$run.log" ) {

      print "Found $config{'ec_mon_master_rundir'}/dqm-data/logs/$run.log on disk\n" if ( $opts{'debug'} );

      my $update = (stat("$config{'ec_mon_master_rundir'}/dqm-data/logs/$run.log"))[9];
      my $time = ((( time() - $update ) / 60.) / 60.);

      printf "Last updated %.1f hours ago\n", $time if ( $opts{'debug'} );

      if ( ( time() - $update ) > $timeout ) {

        print "Run $run needs to be marked daq_done\n" if ( $opts{'debug'} );

        system("$config{'ec_mon_path'}/ec_mon_check --conf $config{'$ec_mon_conf'} --set_status daq_done $run >> /dev/null 2>&1") unless ( $opts{'norun'} );

      }
    }
  }
}

exit 0;

############################################################################

sub usage {

  print STDERR <<INLINE_LITERAL_TEXT;
usage: ec_mon_monitor_task_watcher

  --conf   Needs a path name to use a ec_mon.conf from a location other
           than the current directory.

  --debug
INLINE_LITERAL_TEXT

  exit;
}

############################################################################
