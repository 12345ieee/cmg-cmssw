#!/usr/bin/env python

import os, time, sys, shutil, glob, smtplib, re
from datetime import datetime
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

DIRS = sys.argv[2:] # '/dqmdata/dqm/merged'    # Directory with new (merged) files
INDEX = sys.argv[1] # '/home/dqm/idx'        # DQM GUI server index directory
WAITTIME = 120		       # Wait time for new files (sec)
MAXFILES = 10		       # Max number of files to process at once

while True:
  existing = dict((x, 1) for x in
                  os.popen("visDQMIndex dump %s catalogue |"
                           " grep '^SOURCE-FILE #' |"
                           " awk -F\"'\" '{print $2}'" % INDEX)
                  .read().split())
  nfiles = 0
  new = []

  for DIR in DIRS:
    for dir, subdirs, files in os.walk(DIR):
      for f in files:
#        m = re.match(r'^DQM_V(\d+)_R(\d+)(__[-A-Za-z0-9_]+)?\.root$', f)
        m = re.match(r'^DQM_V(\d+)[_A-Za-z0-9_]+R(\d+)(__[-A-Za-z0-9_]+)?\.root$', f)
        if m:
          filerun = int(m.group(2))
          filev = int(m.group(1))
	  fileds = (m.group(3) or "").replace("__", "/")
          path = "%s/%s" % (dir, f)
          if path not in existing and (filerun > 1 or fileds != ""):
            new.append((filerun, -filev, fileds, path))
            # ^ negative version so reverse sort later will sort into
            # descending order by run, ascending order by version.

  if len(new):
    print '%s: found %d new files.' % (datetime.now(), len(new))

    for run, version, dataset, path in sorted(new)[::-1]:
      nfiles += 1
      if nfiles > MAXFILES:
        break

      print 'Registering %s for run %09d' % (path, run)
      if dataset != "":
        os.system('set -x; visDQMIndex add %s %s' % (INDEX, path))
      else:
        os.system('set -x; visDQMIndex add --dataset "/Global/Online/ALL" %s %s' % (INDEX, path))
      existing[file] = 1

#  if nfiles <= MAXFILES:
#    time.sleep(WAITTIME)
  sys.exit(0)
