$Id$

CMSSW 0-1-0 Release Notes
-------------------------

Preamble
----------
Release notes will in the future follow a more convenient structure, with notes
for every subsystem. For the time being, we provide this top-level text file.

1. General Remarks
------------------


1.1 What to expect
------------------

CMSSW 010 is the first developer's release of the restructured CMS simulation/reconstruction 
software. Therefore, it is targeted to developers, not end users.
No actual physics results are expected to be produced with this release.
However, we do provide some working examples and skeletons that should allow getting started in contributing to CMSSW.

1.2 Examples
------------

- Skeletons: 
  The FWCore/Integration shows examples and the FWCore/Skeletons  (which are explained in https://uimon.cern.ch/twiki/bin/view/CMS/ SkeletonCodeGenerator) will create the 'skeletons' that writes all  the 'boiler plate' code and let people just fill in with their  algorithms. 

- EventFilter/*RawToDigi/test
  Examples of conversions from raw to digi. Run cmsRun --parameter-set *.txt


1.3 Bug Reports
-----------------
Please use  http://savannah.cern.ch/projects/cms-bugs/

1.4 Find out more
-----------------
Other entry points to CMSSW documentation include the official software page:

http://cmsdoc.cern.ch/cms/cpt/Software/html/General/

and the live Wiki pages:

https://uimon.cern.ch/twiki/bin/view/CMS/WebHome


2. Subsystem Detail
-------------------

Below are the detailed release notes for the subsystem for which they were provided


2.1 DataFormats
----------------
This Subsystem contains Data Format definition for real data (not simulation). Implamented for the moment are:

Digis for all the SubDets (CSCDigi, DTDigis, EcalDigi, HcalDigi, SiPixelDigi, SiStripDigi)

RecHits for some SubDets (CaloRecHit, HcalRecHit, SiStripCluster)

DetIds for all the SubDets (DetId, EcalDetId, HcalDetId, MuonDetId, SiPixelDetId, SiStripDetId)


CaloObjects:
    Contains the definitions of calorimetry related EDProducts for use in the Jet Reconstructon demo. 

JetObjects:
    Contains the definition of EDProducts representing Jets.  Currently, only calorimeter jets are defined.  Currently used in the JetReconstruction Demo.

JetAlgorithms
    Contains algorithms for reconstructing jets.

JetProducers
    Contains the EDProducers for producing jets.

JetDemo
    Contains tools needed to create the input file for the JetReconstruction Demo.



2.2 Geometry
------------

This SubSystem contains code to build detector geometries, at various levels (flat geometry, complete one etc.) The general Structure contains some packager named Algo, containing code, and Sata, containing for example the xml files for DDD geometry.

Records: Record definitions for EventSetup objects.

CommonDetUnit , CommonTopology , CommonDetAlgo :
   contain the port of ORCA/CommonDet geometric part

TrackerBaseAlgo : 
   contains high level Tracker Geometry, which contains the numbering scheme building

TrackerSimAlgo : 
   contains concrete Tracker geometry. In particular, use test/runP.txt to see a 
   running example 


GeometryReaders :
   This Subsystem contains various accesses to Geometry (from file, from DB etc)

DBIdealGeometryESSource : 
   access to Ideal Geometry from POOL/ORA

XMLIdealGeometryESSource : 
   access to Ideal Geometry from XML (DDD files)


2.3 CalibCalorimetry 
--------------------

This subsysem should contain ECAL and HCAl code interacting with the conditions database (CdB ). In general the Algos directories will contain pure algorithms and the Plugins directories the framework modules running such algorithms.

    * EcalAlgos : empty
    * EcalPlugins : empty
    * HcalAlgos : algorithms interacting with CdB 
    * HcalPlugins : framework modules using the algorithms


2.4 Framework
-------------

FWCore/EDProduct:
   Contains the minimal portion of the framework needed by EDProduct definitions.  Packages defining data formats should link against this package. 
    This package consists of the definitions for classes that are or may be used in EDProducts, or in the wrappers of EDProducts used for persistency.
  
FWCore/Framework:
   Contains the bulk of the framework.  Producers, analyzers, filters, etc. must link against this package.

   This package depends on FWCore/EDProduct, FWCore/ParameterSet, FWCore/ServiceRegistry, and FWCore/Utilities.
Loading FWCore/Framework will automatically load these other packages.

   This packkage contains many things:

   1) The cmsRun executable for executing framework jobs.

   2) The "Event" class, by which the user accesses events through "get" methods, and populates the event through "put" methods..

   3) The "EventSetup" (ES) system for delivering 'non-event' data (e.g. calibrations) that are relevant for the Event being processed.

   4) Base classes used by inheritance by EDAnalyzers, EDProducers, EDFilters, ESProducers, OutputModules, and InputServices.

   5) The EventScheduler, which runs the various services and modules in the proper order.

   6) The Provenance information for each EDProduct in an event, divided into separate event-dependent and event-independent portions.  The event independent portion is stored in a ProductRegistry.

FWCore/Integration:
   Contains inter-package tests of FWCore code.   Used only internally by the framework.

FWCore/ParameterSet:
   Contains the system for interpreting run-time parameters.

   Some of the elements in a framework application can be configured at run-time by the user. Such elements are configured by a common parameter set system.  To configure a cmsRun executable, the user writes a text file in the configuration language described in the section 'Informal ParameterSet language specification' of the FWCore RoadMap document.  Each configurable element in the framework application is configured at construction time with parameter values supplied by a ParameterSet object. ParameterSet objects contain a collection of name/value pairs.
See the section 'The ParameterSet System' in the FWCore RoadMap document for details.

FWCore/Services (a plug-in):
   Contains specific services, input services, and modules used by the framework, in tests, examples, or in actual framework code.

FWCore/ServiceRegistry:
   The system for delivering services (i.e. application extensions that have no effect on physics).

FWCore/Skeletons:
   Contains scripts for generating working 'skeletons' of code for EDAnalyzers, EDFilters, EDProducers, ESProducers and EventSetup records.

FWCore/Utilities:
   Contains framework specific utilities.  Currently this package is used only for exception and assert handling within the framework.

IOPool/CommonService:
   Holds code common to the PoolOutputModule and PoolInputService, to avoid duplication.
   Will be loaded automatically when either the PoolOutputModule or PoolInputService is loaded.

IOPool/InputService (a plug-in):
   Provides an InputService (PoolInputService) to read back files written by the PoolOutputModule.

IOPool/OutputService: (a plug-in):
   Provides an OutputModule (PoolOutputModule) to make events persistent by writing them to a POOL/ROOT output file.  Output EDProducts may be selected by Module label.  By default, all products are output.

IOPool/Streamer: (a plug-in)
   Provides an InputService (EventStreamInput) template and OutputModule (EventStreamOutput) template that serialize and unserialize an edm::Event into a memory buffer and pass the buffer to a "tranport handler" (provided as a template parameter).  The class template allows for a user defined buffer handler to be plugged into the system (e.g. network transfer protocol handler to move events from a client to a server).  The package also provides a simple example for writing and reading the streamed data buffer to and from standard binary files in the filesystem.




2.5 Visualisation
-----------------

VisFramework /VisFrameworkBase: Shared Framework-based visualisation core. Migrated from IGUANACMS.

VisCosmics /VisCosmicsBase: New package to provide a plugin for basic cosmic visualisation. Migrated from IGUANACMS.

VisCosmics /VisCosmicsSetup: New package to provide a setup plugin for cosmic challenge event display. Migrated from IGUANACMS.

VisCosmics /VisCosmicsApp: New package to provide an application plugin for cosmic challenge event display. Migrated from IGUANACMS.

VisReco /VisTracker: New package to visualize the Tracker geometry.


2.6 Jets
--------

Please see 

http://physics.bu.edu/~fvarela/edm/index.html

and 

http://www.uscms.org/LPC/lpc_jetmet/jetEdm_fernando.pdf
